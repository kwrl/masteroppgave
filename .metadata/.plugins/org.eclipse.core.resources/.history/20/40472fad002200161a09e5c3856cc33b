// automatically generated by Xtext
grammar com.kaurel.klang.xtext.Klang with org.eclipse.xtext.common.Terminals

import "http://www.example.org/klang" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GameDef returns GameDef:
	{GameDef}
	'GameDef'
	'{'
		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?
		('actorDefs' '{' actorDefs+=SpriteDef ( "," actorDefs+=SpriteDef)* '}' )?
	'}';



Expression returns Expression:
	Expression_Impl | Or | And | Plus | Minus | Multiply | Divide | LessThan | Equal | GreaterThan | Not | BooleanLiteral | NumericLiteral | StringLiteral | VariableRef;


Statement returns Statement:
	Statement_Impl | WhileLoop | If | ForeverLoop | SubroutineCall | ControlStatement_Impl | Yield | Variable | Assignment;

Variable returns Variable:
	{Variable}
	'Variable'
	name=EString
	'{'
		('expression' expression=Expression)?
	'}';

SpriteDef returns SpriteDef:
	{SpriteDef}
	'SpriteDef'
	name=EString
	'{'
		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?
		('eventHandlers' '{' eventHandlers+=EventHandler ( "," eventHandlers+=EventHandler)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

Expression_Impl returns Expression:
	{Expression}
	'Expression'
	;

Or returns Or:
	{Or}
	'Or'
	'{'
		('left' left=Expression)?
		('right' right=Expression)?
	'}';

And returns And:
	{And}
	'And'
	'{'
		('left' left=Expression)?
		('right' right=Expression)?
	'}';

Plus returns Plus:
	{Plus}
	'Plus'
	'{'
		('left' left=Expression)?
		('right' right=Expression)?
	'}';

Minus returns Minus:
	{Minus}
	'Minus'
	'{'
		('left' left=Expression)?
		('right' right=Expression)?
	'}';

Multiply returns Multiply:
	{Multiply}
	'Multiply'
	'{'
		('left' left=Expression)?
		('right' right=Expression)?
	'}';

Divide returns Divide:
	{Divide}
	'Divide'
	'{'
		('left' left=Expression)?
		('right' right=Expression)?
	'}';

LessThan returns LessThan:
	{LessThan}
	'LessThan'
	'{'
		('left' left=Expression)?
		('right' right=Expression)?
	'}';

Equal returns Equal:
	{Equal}
	'Equal'
	'{'
		('left' left=Expression)?
		('right' right=Expression)?
	'}';

GreaterThan returns GreaterThan:
	{GreaterThan}
	'GreaterThan'
	'{'
		('left' left=Expression)?
		('right' right=Expression)?
	'}';

Not returns Not:
	{Not}
	'Not'
	'{'
		('expression' expression=Expression)?
	'}';

BooleanLiteral returns BooleanLiteral:
	{BooleanLiteral}
	(value?='value')?
	'BooleanLiteral'
	;

NumericLiteral returns NumericLiteral:
	{NumericLiteral}
	'NumericLiteral'
	'{'
		('value' value=EDouble)?
	'}';

StringLiteral returns StringLiteral:
	{StringLiteral}
	'StringLiteral'
	'{'
		('value' value=EString)?
	'}';

VariableRef returns VariableRef:
	{VariableRef}
	'VariableRef'
	'{'
		('variableName' variableName=EString)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EventHandler returns EventHandler:
	{EventHandler}
	'EventHandler'
	'{'
		('eventType' eventType=EventType)?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

enum EventType returns EventType:
				GAME_STARTED = 'GAME_STARTED';

Statement_Impl returns Statement:
	{Statement}
	'Statement'
	;

WhileLoop returns WhileLoop:
	{WhileLoop}
	'WhileLoop'
	'{'
		('predicate' predicate=Expression)?
		('loopBlock' '{' loopBlock+=Statement ( "," loopBlock+=Statement)* '}' )?
	'}';

If returns If:
	{If}
	'If'
	'{'
		('predicate' predicate=Expression)?
		('ifBlock' '{' ifBlock+=Statement ( "," ifBlock+=Statement)* '}' )?
	'}';

ForeverLoop returns ForeverLoop:
	{ForeverLoop}
	'ForeverLoop'
	'{'
		('loopStatements' '{' loopStatements+=Statement ( "," loopStatements+=Statement)* '}' )?
	'}';

SubroutineCall returns SubroutineCall:
	{SubroutineCall}
	'SubroutineCall'
	name=EString
	'{'
		('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
	'}';

ControlStatement_Impl returns ControlStatement:
	{ControlStatement}
	'ControlStatement'
	;

Yield returns Yield:
	{Yield}
	'Yield'
	;

Assignment returns Assignment:
	{Assignment}
	'Assignment'
	'{'
		('variable' variable=[Variable|EString])?
		('expression' expression=Expression)?
	'}';
