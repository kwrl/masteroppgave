/*
 * generated by Xtext 2.10.0
 */
package com.kaurel.klang.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KlangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSceneActorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSceneActorSceneActorParserRuleCall_0_0 = (RuleCall)cSceneActorAssignment_0.eContents().get(0);
		private final Assignment cSpriteActorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpriteActorsSpriteActorParserRuleCall_1_0 = (RuleCall)cSpriteActorsAssignment_1.eContents().get(0);
		
		//Program:
		//	sceneActor=SceneActor
		//	spriteActors+=SpriteActor*;
		@Override public ParserRule getRule() { return rule; }
		
		//sceneActor=SceneActor spriteActors+=SpriteActor*
		public Group getGroup() { return cGroup; }
		
		//sceneActor=SceneActor
		public Assignment getSceneActorAssignment_0() { return cSceneActorAssignment_0; }
		
		//SceneActor
		public RuleCall getSceneActorSceneActorParserRuleCall_0_0() { return cSceneActorSceneActorParserRuleCall_0_0; }
		
		//spriteActors+=SpriteActor*
		public Assignment getSpriteActorsAssignment_1() { return cSpriteActorsAssignment_1; }
		
		//SpriteActor
		public RuleCall getSpriteActorsSpriteActorParserRuleCall_1_0() { return cSpriteActorsSpriteActorParserRuleCall_1_0; }
	}
	public class SceneActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.SceneActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSceneActorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSceneKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cBEGINTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cLocalVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLocalVariablesVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cLocalVariablesAssignment_3_1.eContents().get(0);
		private final Assignment cEventHandlersAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cEventHandlersEventHandlerParserRuleCall_3_2_0 = (RuleCall)cEventHandlersAssignment_3_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		
		//SceneActor:
		//	{SceneActor}
		//	'scene' name=ID (BEGIN
		//	localVariables+=VariableDeclaration*
		//	eventHandlers+=EventHandler*
		//	END)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SceneActor} 'scene' name=ID (BEGIN localVariables+=VariableDeclaration* eventHandlers+=EventHandler* END)?
		public Group getGroup() { return cGroup; }
		
		//{SceneActor}
		public Action getSceneActorAction_0() { return cSceneActorAction_0; }
		
		//'scene'
		public Keyword getSceneKeyword_1() { return cSceneKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(BEGIN localVariables+=VariableDeclaration* eventHandlers+=EventHandler* END)?
		public Group getGroup_3() { return cGroup_3; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3_0() { return cBEGINTerminalRuleCall_3_0; }
		
		//localVariables+=VariableDeclaration*
		public Assignment getLocalVariablesAssignment_3_1() { return cLocalVariablesAssignment_3_1; }
		
		//VariableDeclaration
		public RuleCall getLocalVariablesVariableDeclarationParserRuleCall_3_1_0() { return cLocalVariablesVariableDeclarationParserRuleCall_3_1_0; }
		
		//eventHandlers+=EventHandler*
		public Assignment getEventHandlersAssignment_3_2() { return cEventHandlersAssignment_3_2; }
		
		//EventHandler
		public RuleCall getEventHandlersEventHandlerParserRuleCall_3_2_0() { return cEventHandlersEventHandlerParserRuleCall_3_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3_3() { return cENDTerminalRuleCall_3_3; }
	}
	public class SpriteActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.SpriteActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpriteActorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSpriteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cBEGINTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cLocalVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLocalVariablesVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cLocalVariablesAssignment_3_1.eContents().get(0);
		private final Assignment cEventHandlersAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cEventHandlersEventHandlerParserRuleCall_3_2_0 = (RuleCall)cEventHandlersAssignment_3_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		
		//SpriteActor:
		//	{SpriteActor}
		//	'sprite' name=ID (BEGIN
		//	localVariables+=VariableDeclaration*
		//	eventHandlers+=EventHandler*
		//	END)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SpriteActor} 'sprite' name=ID (BEGIN localVariables+=VariableDeclaration* eventHandlers+=EventHandler* END)?
		public Group getGroup() { return cGroup; }
		
		//{SpriteActor}
		public Action getSpriteActorAction_0() { return cSpriteActorAction_0; }
		
		//'sprite'
		public Keyword getSpriteKeyword_1() { return cSpriteKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(BEGIN localVariables+=VariableDeclaration* eventHandlers+=EventHandler* END)?
		public Group getGroup_3() { return cGroup_3; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3_0() { return cBEGINTerminalRuleCall_3_0; }
		
		//localVariables+=VariableDeclaration*
		public Assignment getLocalVariablesAssignment_3_1() { return cLocalVariablesAssignment_3_1; }
		
		//VariableDeclaration
		public RuleCall getLocalVariablesVariableDeclarationParserRuleCall_3_1_0() { return cLocalVariablesVariableDeclarationParserRuleCall_3_1_0; }
		
		//eventHandlers+=EventHandler*
		public Assignment getEventHandlersAssignment_3_2() { return cEventHandlersAssignment_3_2; }
		
		//EventHandler
		public RuleCall getEventHandlersEventHandlerParserRuleCall_3_2_0() { return cEventHandlersEventHandlerParserRuleCall_3_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3_3() { return cENDTerminalRuleCall_3_3; }
	}
	public class EventHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.EventHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceEventEventParserRuleCall_1_0 = (RuleCall)cReferenceEventAssignment_1.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//EventHandler:
		//	'when' referenceEvent=Event
		//	BEGIN
		//	statements+=Statement*
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//'when' referenceEvent=Event BEGIN statements+=Statement* END
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//referenceEvent=Event
		public Assignment getReferenceEventAssignment_1() { return cReferenceEventAssignment_1; }
		
		//Event
		public RuleCall getReferenceEventEventParserRuleCall_1_0() { return cReferenceEventEventParserRuleCall_1_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollisionEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeyPressedEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMessageReceivedEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGameStartEventParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cClickEventParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Event:
		//	CollisionEvent | KeyPressedEvent | MessageReceivedEvent | GameStartEvent | ClickEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//CollisionEvent | KeyPressedEvent | MessageReceivedEvent | GameStartEvent | ClickEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CollisionEvent
		public RuleCall getCollisionEventParserRuleCall_0() { return cCollisionEventParserRuleCall_0; }
		
		//KeyPressedEvent
		public RuleCall getKeyPressedEventParserRuleCall_1() { return cKeyPressedEventParserRuleCall_1; }
		
		//MessageReceivedEvent
		public RuleCall getMessageReceivedEventParserRuleCall_2() { return cMessageReceivedEventParserRuleCall_2; }
		
		//GameStartEvent
		public RuleCall getGameStartEventParserRuleCall_3() { return cGameStartEventParserRuleCall_3; }
		
		//ClickEvent
		public RuleCall getClickEventParserRuleCall_4() { return cClickEventParserRuleCall_4; }
	}
	public class MessageReceivedEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.MessageReceivedEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMessageReceivedEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cReceivedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MessageReceivedEvent Event:
		//	{MessageReceivedEvent} name=STRING 'received'
		@Override public ParserRule getRule() { return rule; }
		
		//{MessageReceivedEvent} name=STRING 'received'
		public Group getGroup() { return cGroup; }
		
		//{MessageReceivedEvent}
		public Action getMessageReceivedEventAction_0() { return cMessageReceivedEventAction_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'received'
		public Keyword getReceivedKeyword_2() { return cReceivedKeyword_2; }
	}
	public class GameStartEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.GameStartEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGameStartEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStartsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//GameStartEvent Event:
		//	{GameStartEvent}
		//	'game' 'starts'
		@Override public ParserRule getRule() { return rule; }
		
		//{GameStartEvent} 'game' 'starts'
		public Group getGroup() { return cGroup; }
		
		//{GameStartEvent}
		public Action getGameStartEventAction_0() { return cGameStartEventAction_0; }
		
		//'game'
		public Keyword getGameKeyword_1() { return cGameKeyword_1; }
		
		//'starts'
		public Keyword getStartsKeyword_2() { return cStartsKeyword_2; }
	}
	public class ClickEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.ClickEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClickEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClickedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ClickEvent Event:
		//	{ClickEvent}
		//	'clicked'
		@Override public ParserRule getRule() { return rule; }
		
		//{ClickEvent} 'clicked'
		public Group getGroup() { return cGroup; }
		
		//{ClickEvent}
		public Action getClickEventAction_0() { return cClickEventAction_0; }
		
		//'clicked'
		public Keyword getClickedKeyword_1() { return cClickedKeyword_1; }
	}
	public class KeyPressedEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.KeyPressedEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKeyPressEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyKeysEnumRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cPressedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//KeyPressedEvent Event:
		//	{KeyPressEvent} key=Keys 'pressed'
		@Override public ParserRule getRule() { return rule; }
		
		//{KeyPressEvent} key=Keys 'pressed'
		public Group getGroup() { return cGroup; }
		
		//{KeyPressEvent}
		public Action getKeyPressEventAction_0() { return cKeyPressEventAction_0; }
		
		//key=Keys
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//Keys
		public RuleCall getKeyKeysEnumRuleCall_1_0() { return cKeyKeysEnumRuleCall_1_0; }
		
		//'pressed'
		public Keyword getPressedKeyword_2() { return cPressedKeyword_2; }
	}
	public class CollisionEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.CollisionEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollisionEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCollidesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetSpriteActorCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetSpriteActorIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetSpriteActorCrossReference_3_0.eContents().get(1);
		
		//CollisionEvent Event:
		//	{CollisionEvent}
		//	'collides' 'with' target=[SpriteActor]
		@Override public ParserRule getRule() { return rule; }
		
		//{CollisionEvent} 'collides' 'with' target=[SpriteActor]
		public Group getGroup() { return cGroup; }
		
		//{CollisionEvent}
		public Action getCollisionEventAction_0() { return cCollisionEventAction_0; }
		
		//'collides'
		public Keyword getCollidesKeyword_1() { return cCollidesKeyword_1; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//target=[SpriteActor]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[SpriteActor]
		public CrossReference getTargetSpriteActorCrossReference_3_0() { return cTargetSpriteActorCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetSpriteActorIDTerminalRuleCall_3_0_1() { return cTargetSpriteActorIDTerminalRuleCall_3_0_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhileLoopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForeverLoopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSleepParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSendMessageParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Statement:
		//	WhileLoop | If | VariableAssignment | ForeverLoop | FunctionCall | Sleep | SendMessage;
		@Override public ParserRule getRule() { return rule; }
		
		//WhileLoop | If | VariableAssignment | ForeverLoop | FunctionCall | Sleep | SendMessage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_0() { return cWhileLoopParserRuleCall_0; }
		
		//If
		public RuleCall getIfParserRuleCall_1() { return cIfParserRuleCall_1; }
		
		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_2() { return cVariableAssignmentParserRuleCall_2; }
		
		//ForeverLoop
		public RuleCall getForeverLoopParserRuleCall_3() { return cForeverLoopParserRuleCall_3; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_4() { return cFunctionCallParserRuleCall_4; }
		
		//Sleep
		public RuleCall getSleepParserRuleCall_5() { return cSleepParserRuleCall_5; }
		
		//SendMessage
		public RuleCall getSendMessageParserRuleCall_6() { return cSendMessageParserRuleCall_6; }
	}
	public class SendMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.SendMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSendMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSendMessageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SendMessage Statement:
		//	{SendMessage}
		//	'sendMessage' '(' name=STRING ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{SendMessage} 'sendMessage' '(' name=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//{SendMessage}
		public Action getSendMessageAction_0() { return cSendMessageAction_0; }
		
		//'sendMessage'
		public Keyword getSendMessageKeyword_1() { return cSendMessageKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileLoopAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateExpressionParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//WhileLoop Statement:
		//	{WhileLoop}
		//	'while' predicate=Expression
		//	BEGIN
		//	statements+=Statement*
		//	END
		@Override public ParserRule getRule() { return rule; }
		
		//{WhileLoop} 'while' predicate=Expression BEGIN statements+=Statement* END
		public Group getGroup() { return cGroup; }
		
		//{WhileLoop}
		public Action getWhileLoopAction_0() { return cWhileLoopAction_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//predicate=Expression
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_2_0() { return cPredicateExpressionParserRuleCall_2_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateExpressionParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cIfBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIfBlockStatementParserRuleCall_4_0 = (RuleCall)cIfBlockAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Assignment cElseBlockAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cElseBlockStatementParserRuleCall_6_2_0 = (RuleCall)cElseBlockAssignment_6_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		
		//If Statement:
		//	{If}
		//	'if' predicate=Expression
		//	BEGIN
		//	ifBlock+=Statement*
		//	END ('else'
		//	BEGIN
		//	elseBlock+=Statement*
		//	END)?
		@Override public ParserRule getRule() { return rule; }
		
		//{If} 'if' predicate=Expression BEGIN ifBlock+=Statement* END ('else' BEGIN elseBlock+=Statement* END)?
		public Group getGroup() { return cGroup; }
		
		//{If}
		public Action getIfAction_0() { return cIfAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//predicate=Expression
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_2_0() { return cPredicateExpressionParserRuleCall_2_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//ifBlock+=Statement*
		public Assignment getIfBlockAssignment_4() { return cIfBlockAssignment_4; }
		
		//Statement
		public RuleCall getIfBlockStatementParserRuleCall_4_0() { return cIfBlockStatementParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
		
		//('else' BEGIN elseBlock+=Statement* END)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_6_1() { return cBEGINTerminalRuleCall_6_1; }
		
		//elseBlock+=Statement*
		public Assignment getElseBlockAssignment_6_2() { return cElseBlockAssignment_6_2; }
		
		//Statement
		public RuleCall getElseBlockStatementParserRuleCall_6_2_0() { return cElseBlockStatementParserRuleCall_6_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6_3() { return cENDTerminalRuleCall_6_3; }
	}
	public class ForeverLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.ForeverLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForeverLoopAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForeverKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ForeverLoop Statement:
		//	{ForeverLoop}
		//	'forever'
		//	BEGIN
		//	statements+=Statement*
		//	END
		@Override public ParserRule getRule() { return rule; }
		
		//{ForeverLoop} 'forever' BEGIN statements+=Statement* END
		public Group getGroup() { return cGroup; }
		
		//{ForeverLoop}
		public Action getForeverLoopAction_0() { return cForeverLoopAction_0; }
		
		//'forever'
		public Keyword getForeverKeyword_1() { return cForeverKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//	'var' name=ID '=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}
	public class VariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.VariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableNameIDTerminalRuleCall_0_0 = (RuleCall)cVariableNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//VariableAssignment:
		//	variableName=ID '=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//variableName=ID '=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//variableName=ID
		public Assignment getVariableNameAssignment_0() { return cVariableNameAssignment_0; }
		
		//ID
		public RuleCall getVariableNameIDTerminalRuleCall_0_0() { return cVariableNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class SleepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.Sleep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSleepAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSleepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDurationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDurationExpressionParserRuleCall_3_0 = (RuleCall)cDurationAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sleep Statement:
		//	{Sleep}
		//	'sleep' '(' duration=Expression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{Sleep} 'sleep' '(' duration=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//{Sleep}
		public Action getSleepAction_0() { return cSleepAction_0; }
		
		//'sleep'
		public Keyword getSleepKeyword_1() { return cSleepKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//duration=Expression
		public Assignment getDurationAssignment_3() { return cDurationAssignment_3; }
		
		//Expression
		public RuleCall getDurationExpressionParserRuleCall_3_0() { return cDurationExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} 'or' right=And)*
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} 'or' right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} 'or' right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Comparison ({And.left=current} 'and' right=Comparison)*
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({And.left=current} 'and' right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({And.left=current} 'and' right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPlusLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Plus Expression:
		//	Minus ({Plus.left=current} '+' right=Minus)*
		@Override public ParserRule getRule() { return rule; }
		
		//Minus ({Plus.left=current} '+' right=Minus)*
		public Group getGroup() { return cGroup; }
		
		//Minus
		public RuleCall getMinusParserRuleCall_0() { return cMinusParserRuleCall_0; }
		
		//({Plus.left=current} '+' right=Minus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0() { return cPlusLeftAction_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }
		
		//right=Minus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Minus
		public RuleCall getRightMinusParserRuleCall_1_2_0() { return cRightMinusParserRuleCall_1_2_0; }
	}
	public class MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMinusLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Minus Expression:
		//	Multiply ({Minus.left=current} '-' right=Multiply)*
		@Override public ParserRule getRule() { return rule; }
		
		//Multiply ({Minus.left=current} '-' right=Multiply)*
		public Group getGroup() { return cGroup; }
		
		//Multiply
		public RuleCall getMultiplyParserRuleCall_0() { return cMultiplyParserRuleCall_0; }
		
		//({Minus.left=current} '-' right=Multiply)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0() { return cMinusLeftAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//right=Multiply
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiply
		public RuleCall getRightMultiplyParserRuleCall_1_2_0() { return cRightMultiplyParserRuleCall_1_2_0; }
	}
	public class MultiplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.Multiply");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivideParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplyLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDivideParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiply Expression:
		//	Divide ({Multiply.left=current} '*' right=Divide)*
		@Override public ParserRule getRule() { return rule; }
		
		//Divide ({Multiply.left=current} '*' right=Divide)*
		public Group getGroup() { return cGroup; }
		
		//Divide
		public RuleCall getDivideParserRuleCall_0() { return cDivideParserRuleCall_0; }
		
		//({Multiply.left=current} '*' right=Divide)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiply.left=current}
		public Action getMultiplyLeftAction_1_0() { return cMultiplyLeftAction_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//right=Divide
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Divide
		public RuleCall getRightDivideParserRuleCall_1_2_0() { return cRightDivideParserRuleCall_1_2_0; }
	}
	public class DivideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.Divide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDivideLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Divide Expression:
		//	PrimaryExpression ({Divide.left=current} '/' right=PrimaryExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({Divide.left=current} '/' right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({Divide.left=current} '/' right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Divide.left=current}
		public Action getDivideLeftAction_1_0() { return cDivideLeftAction_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cLessThanLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cEqualLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Action cGreaterThanLeftAction_1_0_2_1 = (Action)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Action cLessThanOrEqualLeftAction_1_0_3_1 = (Action)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_4_0 = (Keyword)cGroup_1_0_4.eContents().get(0);
		private final Action cGreaterThanOrEqualLeftAction_1_0_4_1 = (Action)cGroup_1_0_4.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPlusParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Comparison Expression:
		//	Plus (('<' {LessThan.left=current} |
		//	'==' {Equal.left=current} |
		//	'>' {GreaterThan.left=current} |
		//	'<=' {LessThanOrEqual.left=current} |
		//	'>=' {GreaterThanOrEqual.left=current}) right=Plus)*
		@Override public ParserRule getRule() { return rule; }
		
		//Plus (('<' {LessThan.left=current} | '==' {Equal.left=current} | '>' {GreaterThan.left=current} | '<='
		//{LessThanOrEqual.left=current} | '>=' {GreaterThanOrEqual.left=current}) right=Plus)*
		public Group getGroup() { return cGroup; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_0() { return cPlusParserRuleCall_0; }
		
		//(('<' {LessThan.left=current} | '==' {Equal.left=current} | '>' {GreaterThan.left=current} | '<='
		//{LessThanOrEqual.left=current} | '>=' {GreaterThanOrEqual.left=current}) right=Plus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('<' {LessThan.left=current} | '==' {Equal.left=current} | '>' {GreaterThan.left=current} | '<='
		//{LessThanOrEqual.left=current} | '>=' {GreaterThanOrEqual.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'<' {LessThan.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_0_0() { return cLessThanSignKeyword_1_0_0_0; }
		
		//{LessThan.left=current}
		public Action getLessThanLeftAction_1_0_0_1() { return cLessThanLeftAction_1_0_0_1; }
		
		//'==' {Equal.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_1_0() { return cEqualsSignEqualsSignKeyword_1_0_1_0; }
		
		//{Equal.left=current}
		public Action getEqualLeftAction_1_0_1_1() { return cEqualLeftAction_1_0_1_1; }
		
		//'>' {GreaterThan.left=current}
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_2_0() { return cGreaterThanSignKeyword_1_0_2_0; }
		
		//{GreaterThan.left=current}
		public Action getGreaterThanLeftAction_1_0_2_1() { return cGreaterThanLeftAction_1_0_2_1; }
		
		//'<=' {LessThanOrEqual.left=current}
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_3_0() { return cLessThanSignEqualsSignKeyword_1_0_3_0; }
		
		//{LessThanOrEqual.left=current}
		public Action getLessThanOrEqualLeftAction_1_0_3_1() { return cLessThanOrEqualLeftAction_1_0_3_1; }
		
		//'>=' {GreaterThanOrEqual.left=current}
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_4_0() { return cGreaterThanSignEqualsSignKeyword_1_0_4_0; }
		
		//{GreaterThanOrEqual.left=current}
		public Action getGreaterThanOrEqualLeftAction_1_0_4_1() { return cGreaterThanOrEqualLeftAction_1_0_4_1; }
		
		//right=Plus
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Plus
		public RuleCall getRightPlusParserRuleCall_1_1_0() { return cRightPlusParserRuleCall_1_1_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersExpressionParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	name=ID '(' (parameters+=Expression (',' parameters+=Expression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' (parameters+=Expression (',' parameters+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=Expression (',' parameters+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_0_0() { return cParametersExpressionParserRuleCall_2_0_0; }
		
		//(',' parameters+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_1_1_0() { return cParametersExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cUnaryMinusAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionPrimaryExpressionParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cToDoubleAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cDoubleKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpressionAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpressionPrimaryExpressionParserRuleCall_3_3_0 = (RuleCall)cExpressionAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cToIntAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cIntKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cExpressionAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cExpressionPrimaryExpressionParserRuleCall_4_3_0 = (RuleCall)cExpressionAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final RuleCall cFunctionCallParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAtomicExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//PrimaryExpression Expression:
		//	'(' Expression ')' | {Not} 'not' expression=PrimaryExpression | {UnaryMinus} '-' expression=PrimaryExpression |
		//	{ToDouble} 'double' '(' expression=PrimaryExpression ')' | {ToInt} 'int' '(' expression=PrimaryExpression ')' |
		//	FunctionCall | AtomicExpression
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {Not} 'not' expression=PrimaryExpression | {UnaryMinus} '-' expression=PrimaryExpression |
		//{ToDouble} 'double' '(' expression=PrimaryExpression ')' | {ToInt} 'int' '(' expression=PrimaryExpression ')' |
		//FunctionCall | AtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} 'not' expression=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//'not'
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }
		
		//expression=PrimaryExpression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//PrimaryExpression
		public RuleCall getExpressionPrimaryExpressionParserRuleCall_1_2_0() { return cExpressionPrimaryExpressionParserRuleCall_1_2_0; }
		
		//{UnaryMinus} '-' expression=PrimaryExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//{UnaryMinus}
		public Action getUnaryMinusAction_2_0() { return cUnaryMinusAction_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
		
		//expression=PrimaryExpression
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//PrimaryExpression
		public RuleCall getExpressionPrimaryExpressionParserRuleCall_2_2_0() { return cExpressionPrimaryExpressionParserRuleCall_2_2_0; }
		
		//{ToDouble} 'double' '(' expression=PrimaryExpression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{ToDouble}
		public Action getToDoubleAction_3_0() { return cToDoubleAction_3_0; }
		
		//'double'
		public Keyword getDoubleKeyword_3_1() { return cDoubleKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//expression=PrimaryExpression
		public Assignment getExpressionAssignment_3_3() { return cExpressionAssignment_3_3; }
		
		//PrimaryExpression
		public RuleCall getExpressionPrimaryExpressionParserRuleCall_3_3_0() { return cExpressionPrimaryExpressionParserRuleCall_3_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//{ToInt} 'int' '(' expression=PrimaryExpression ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{ToInt}
		public Action getToIntAction_4_0() { return cToIntAction_4_0; }
		
		//'int'
		public Keyword getIntKeyword_4_1() { return cIntKeyword_4_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//expression=PrimaryExpression
		public Assignment getExpressionAssignment_4_3() { return cExpressionAssignment_4_3; }
		
		//PrimaryExpression
		public RuleCall getExpressionPrimaryExpressionParserRuleCall_4_3_0() { return cExpressionPrimaryExpressionParserRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_5() { return cFunctionCallParserRuleCall_5; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_6() { return cAtomicExpressionParserRuleCall_6; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_1_0_0 = (Keyword)cValueAssignment_0_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDoubleLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDECIMALParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntegerLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cVariableReferenceAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cVariableNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariableNameIDTerminalRuleCall_4_1_0 = (RuleCall)cVariableNameAssignment_4_1.eContents().get(0);
		
		//AtomicExpression Expression:
		//	{BooleanLiteral} (value?='true' | 'false') | {DoubleLiteral} value=DECIMAL | {IntegerLiteral} value=INT |
		//	{StringLiteral} value=STRING | {VariableReference} variableName=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanLiteral} (value?='true' | 'false') | {DoubleLiteral} value=DECIMAL | {IntegerLiteral} value=INT |
		//{StringLiteral} value=STRING | {VariableReference} variableName=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanLiteral} (value?='true' | 'false')
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0_0() { return cBooleanLiteralAction_0_0; }
		
		//(value?='true' | 'false')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//value?='true'
		public Assignment getValueAssignment_0_1_0() { return cValueAssignment_0_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_1_0_0() { return cValueTrueKeyword_0_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_0_1_1() { return cFalseKeyword_0_1_1; }
		
		//{DoubleLiteral} value=DECIMAL
		public Group getGroup_1() { return cGroup_1; }
		
		//{DoubleLiteral}
		public Action getDoubleLiteralAction_1_0() { return cDoubleLiteralAction_1_0; }
		
		//value=DECIMAL
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//DECIMAL
		public RuleCall getValueDECIMALParserRuleCall_1_1_0() { return cValueDECIMALParserRuleCall_1_1_0; }
		
		//{IntegerLiteral} value=INT
		public Group getGroup_2() { return cGroup_2; }
		
		//{IntegerLiteral}
		public Action getIntegerLiteralAction_2_0() { return cIntegerLiteralAction_2_0; }
		
		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }
		
		//{StringLiteral} value=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_3_0() { return cStringLiteralAction_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
		
		//{VariableReference} variableName=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//{VariableReference}
		public Action getVariableReferenceAction_4_0() { return cVariableReferenceAction_4_0; }
		
		//variableName=ID
		public Assignment getVariableNameAssignment_4_1() { return cVariableNameAssignment_4_1; }
		
		//ID
		public RuleCall getVariableNameIDTerminalRuleCall_4_1_0() { return cVariableNameIDTerminalRuleCall_4_1_0; }
	}
	public class DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.DECIMAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DECIMAL ecore::EDouble:
		//	INT '.' INT
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	public class KeysElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.Keys");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAAKeyword_0_0 = (Keyword)cAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBBKeyword_1_0 = (Keyword)cBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCCKeyword_2_0 = (Keyword)cCEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDDKeyword_3_0 = (Keyword)cDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEEKeyword_4_0 = (Keyword)cEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFFKeyword_5_0 = (Keyword)cFEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGGKeyword_6_0 = (Keyword)cGEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHHKeyword_7_0 = (Keyword)cHEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cIEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cIIKeyword_8_0 = (Keyword)cIEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cJEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cJJKeyword_9_0 = (Keyword)cJEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cKEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cKKKeyword_10_0 = (Keyword)cKEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cLEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cLLKeyword_11_0 = (Keyword)cLEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cMEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cMMKeyword_12_0 = (Keyword)cMEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cNEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cNNKeyword_13_0 = (Keyword)cNEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cOEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cOOKeyword_14_0 = (Keyword)cOEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cPEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cPPKeyword_15_0 = (Keyword)cPEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cQEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cQQKeyword_16_0 = (Keyword)cQEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cREnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cRRKeyword_17_0 = (Keyword)cREnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cSEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cSSKeyword_18_0 = (Keyword)cSEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cTEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cTTKeyword_19_0 = (Keyword)cTEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cUEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cUUKeyword_20_0 = (Keyword)cUEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cVEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cVVKeyword_21_0 = (Keyword)cVEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cWEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cWWKeyword_22_0 = (Keyword)cWEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cXEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cXXKeyword_23_0 = (Keyword)cXEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cYEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cYYKeyword_24_0 = (Keyword)cYEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cZEnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cZZKeyword_25_0 = (Keyword)cZEnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cSPACEEnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cSPACESPACEKeyword_26_0 = (Keyword)cSPACEEnumLiteralDeclaration_26.eContents().get(0);
		private final EnumLiteralDeclaration cENTEREnumLiteralDeclaration_27 = (EnumLiteralDeclaration)cAlternatives.eContents().get(27);
		private final Keyword cENTERENTERKeyword_27_0 = (Keyword)cENTEREnumLiteralDeclaration_27.eContents().get(0);
		
		//enum Keys:
		//	A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | SPACE | ENTER;
		public EnumRule getRule() { return rule; }
		
		//A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | SPACE | ENTER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//A
		public EnumLiteralDeclaration getAEnumLiteralDeclaration_0() { return cAEnumLiteralDeclaration_0; }
		
		//"A"
		public Keyword getAAKeyword_0_0() { return cAAKeyword_0_0; }
		
		//B
		public EnumLiteralDeclaration getBEnumLiteralDeclaration_1() { return cBEnumLiteralDeclaration_1; }
		
		//"B"
		public Keyword getBBKeyword_1_0() { return cBBKeyword_1_0; }
		
		//C
		public EnumLiteralDeclaration getCEnumLiteralDeclaration_2() { return cCEnumLiteralDeclaration_2; }
		
		//"C"
		public Keyword getCCKeyword_2_0() { return cCCKeyword_2_0; }
		
		//D
		public EnumLiteralDeclaration getDEnumLiteralDeclaration_3() { return cDEnumLiteralDeclaration_3; }
		
		//"D"
		public Keyword getDDKeyword_3_0() { return cDDKeyword_3_0; }
		
		//E
		public EnumLiteralDeclaration getEEnumLiteralDeclaration_4() { return cEEnumLiteralDeclaration_4; }
		
		//"E"
		public Keyword getEEKeyword_4_0() { return cEEKeyword_4_0; }
		
		//F
		public EnumLiteralDeclaration getFEnumLiteralDeclaration_5() { return cFEnumLiteralDeclaration_5; }
		
		//"F"
		public Keyword getFFKeyword_5_0() { return cFFKeyword_5_0; }
		
		//G
		public EnumLiteralDeclaration getGEnumLiteralDeclaration_6() { return cGEnumLiteralDeclaration_6; }
		
		//"G"
		public Keyword getGGKeyword_6_0() { return cGGKeyword_6_0; }
		
		//H
		public EnumLiteralDeclaration getHEnumLiteralDeclaration_7() { return cHEnumLiteralDeclaration_7; }
		
		//"H"
		public Keyword getHHKeyword_7_0() { return cHHKeyword_7_0; }
		
		//I
		public EnumLiteralDeclaration getIEnumLiteralDeclaration_8() { return cIEnumLiteralDeclaration_8; }
		
		//"I"
		public Keyword getIIKeyword_8_0() { return cIIKeyword_8_0; }
		
		//J
		public EnumLiteralDeclaration getJEnumLiteralDeclaration_9() { return cJEnumLiteralDeclaration_9; }
		
		//"J"
		public Keyword getJJKeyword_9_0() { return cJJKeyword_9_0; }
		
		//K
		public EnumLiteralDeclaration getKEnumLiteralDeclaration_10() { return cKEnumLiteralDeclaration_10; }
		
		//"K"
		public Keyword getKKKeyword_10_0() { return cKKKeyword_10_0; }
		
		//L
		public EnumLiteralDeclaration getLEnumLiteralDeclaration_11() { return cLEnumLiteralDeclaration_11; }
		
		//"L"
		public Keyword getLLKeyword_11_0() { return cLLKeyword_11_0; }
		
		//M
		public EnumLiteralDeclaration getMEnumLiteralDeclaration_12() { return cMEnumLiteralDeclaration_12; }
		
		//"M"
		public Keyword getMMKeyword_12_0() { return cMMKeyword_12_0; }
		
		//N
		public EnumLiteralDeclaration getNEnumLiteralDeclaration_13() { return cNEnumLiteralDeclaration_13; }
		
		//"N"
		public Keyword getNNKeyword_13_0() { return cNNKeyword_13_0; }
		
		//O
		public EnumLiteralDeclaration getOEnumLiteralDeclaration_14() { return cOEnumLiteralDeclaration_14; }
		
		//"O"
		public Keyword getOOKeyword_14_0() { return cOOKeyword_14_0; }
		
		//P
		public EnumLiteralDeclaration getPEnumLiteralDeclaration_15() { return cPEnumLiteralDeclaration_15; }
		
		//"P"
		public Keyword getPPKeyword_15_0() { return cPPKeyword_15_0; }
		
		//Q
		public EnumLiteralDeclaration getQEnumLiteralDeclaration_16() { return cQEnumLiteralDeclaration_16; }
		
		//"Q"
		public Keyword getQQKeyword_16_0() { return cQQKeyword_16_0; }
		
		//R
		public EnumLiteralDeclaration getREnumLiteralDeclaration_17() { return cREnumLiteralDeclaration_17; }
		
		//"R"
		public Keyword getRRKeyword_17_0() { return cRRKeyword_17_0; }
		
		//S
		public EnumLiteralDeclaration getSEnumLiteralDeclaration_18() { return cSEnumLiteralDeclaration_18; }
		
		//"S"
		public Keyword getSSKeyword_18_0() { return cSSKeyword_18_0; }
		
		//T
		public EnumLiteralDeclaration getTEnumLiteralDeclaration_19() { return cTEnumLiteralDeclaration_19; }
		
		//"T"
		public Keyword getTTKeyword_19_0() { return cTTKeyword_19_0; }
		
		//U
		public EnumLiteralDeclaration getUEnumLiteralDeclaration_20() { return cUEnumLiteralDeclaration_20; }
		
		//"U"
		public Keyword getUUKeyword_20_0() { return cUUKeyword_20_0; }
		
		//V
		public EnumLiteralDeclaration getVEnumLiteralDeclaration_21() { return cVEnumLiteralDeclaration_21; }
		
		//"V"
		public Keyword getVVKeyword_21_0() { return cVVKeyword_21_0; }
		
		//W
		public EnumLiteralDeclaration getWEnumLiteralDeclaration_22() { return cWEnumLiteralDeclaration_22; }
		
		//"W"
		public Keyword getWWKeyword_22_0() { return cWWKeyword_22_0; }
		
		//X
		public EnumLiteralDeclaration getXEnumLiteralDeclaration_23() { return cXEnumLiteralDeclaration_23; }
		
		//"X"
		public Keyword getXXKeyword_23_0() { return cXXKeyword_23_0; }
		
		//Y
		public EnumLiteralDeclaration getYEnumLiteralDeclaration_24() { return cYEnumLiteralDeclaration_24; }
		
		//"Y"
		public Keyword getYYKeyword_24_0() { return cYYKeyword_24_0; }
		
		//Z
		public EnumLiteralDeclaration getZEnumLiteralDeclaration_25() { return cZEnumLiteralDeclaration_25; }
		
		//"Z"
		public Keyword getZZKeyword_25_0() { return cZZKeyword_25_0; }
		
		//SPACE
		public EnumLiteralDeclaration getSPACEEnumLiteralDeclaration_26() { return cSPACEEnumLiteralDeclaration_26; }
		
		//"SPACE"
		public Keyword getSPACESPACEKeyword_26_0() { return cSPACESPACEKeyword_26_0; }
		
		//ENTER
		public EnumLiteralDeclaration getENTEREnumLiteralDeclaration_27() { return cENTEREnumLiteralDeclaration_27; }
		
		//"ENTER"
		public Keyword getENTERENTERKeyword_27_0() { return cENTERENTERKeyword_27_0; }
	}
	
	private final ProgramElements pProgram;
	private final SceneActorElements pSceneActor;
	private final SpriteActorElements pSpriteActor;
	private final EventHandlerElements pEventHandler;
	private final EventElements pEvent;
	private final MessageReceivedEventElements pMessageReceivedEvent;
	private final GameStartEventElements pGameStartEvent;
	private final ClickEventElements pClickEvent;
	private final KeyPressedEventElements pKeyPressedEvent;
	private final CollisionEventElements pCollisionEvent;
	private final StatementElements pStatement;
	private final SendMessageElements pSendMessage;
	private final KeysElements eKeys;
	private final WhileLoopElements pWhileLoop;
	private final IfElements pIf;
	private final ForeverLoopElements pForeverLoop;
	private final VariableDeclarationElements pVariableDeclaration;
	private final VariableAssignmentElements pVariableAssignment;
	private final SleepElements pSleep;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final PlusElements pPlus;
	private final MinusElements pMinus;
	private final MultiplyElements pMultiply;
	private final DivideElements pDivide;
	private final ComparisonElements pComparison;
	private final FunctionCallElements pFunctionCall;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final AtomicExpressionElements pAtomicExpression;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	private final DECIMALElements pDECIMAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KlangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pSceneActor = new SceneActorElements();
		this.pSpriteActor = new SpriteActorElements();
		this.pEventHandler = new EventHandlerElements();
		this.pEvent = new EventElements();
		this.pMessageReceivedEvent = new MessageReceivedEventElements();
		this.pGameStartEvent = new GameStartEventElements();
		this.pClickEvent = new ClickEventElements();
		this.pKeyPressedEvent = new KeyPressedEventElements();
		this.pCollisionEvent = new CollisionEventElements();
		this.pStatement = new StatementElements();
		this.pSendMessage = new SendMessageElements();
		this.eKeys = new KeysElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pIf = new IfElements();
		this.pForeverLoop = new ForeverLoopElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pVariableAssignment = new VariableAssignmentElements();
		this.pSleep = new SleepElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pPlus = new PlusElements();
		this.pMinus = new MinusElements();
		this.pMultiply = new MultiplyElements();
		this.pDivide = new DivideElements();
		this.pComparison = new ComparisonElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaurel.klang.xtext.Klang.END");
		this.pDECIMAL = new DECIMALElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.kaurel.klang.xtext.Klang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	sceneActor=SceneActor
	//	spriteActors+=SpriteActor*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//SceneActor:
	//	{SceneActor}
	//	'scene' name=ID (BEGIN
	//	localVariables+=VariableDeclaration*
	//	eventHandlers+=EventHandler*
	//	END)?;
	public SceneActorElements getSceneActorAccess() {
		return pSceneActor;
	}
	
	public ParserRule getSceneActorRule() {
		return getSceneActorAccess().getRule();
	}
	
	//SpriteActor:
	//	{SpriteActor}
	//	'sprite' name=ID (BEGIN
	//	localVariables+=VariableDeclaration*
	//	eventHandlers+=EventHandler*
	//	END)?;
	public SpriteActorElements getSpriteActorAccess() {
		return pSpriteActor;
	}
	
	public ParserRule getSpriteActorRule() {
		return getSpriteActorAccess().getRule();
	}
	
	//EventHandler:
	//	'when' referenceEvent=Event
	//	BEGIN
	//	statements+=Statement*
	//	END;
	public EventHandlerElements getEventHandlerAccess() {
		return pEventHandler;
	}
	
	public ParserRule getEventHandlerRule() {
		return getEventHandlerAccess().getRule();
	}
	
	//Event:
	//	CollisionEvent | KeyPressedEvent | MessageReceivedEvent | GameStartEvent | ClickEvent;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//MessageReceivedEvent Event:
	//	{MessageReceivedEvent} name=STRING 'received'
	public MessageReceivedEventElements getMessageReceivedEventAccess() {
		return pMessageReceivedEvent;
	}
	
	public ParserRule getMessageReceivedEventRule() {
		return getMessageReceivedEventAccess().getRule();
	}
	
	//GameStartEvent Event:
	//	{GameStartEvent}
	//	'game' 'starts'
	public GameStartEventElements getGameStartEventAccess() {
		return pGameStartEvent;
	}
	
	public ParserRule getGameStartEventRule() {
		return getGameStartEventAccess().getRule();
	}
	
	//ClickEvent Event:
	//	{ClickEvent}
	//	'clicked'
	public ClickEventElements getClickEventAccess() {
		return pClickEvent;
	}
	
	public ParserRule getClickEventRule() {
		return getClickEventAccess().getRule();
	}
	
	//KeyPressedEvent Event:
	//	{KeyPressEvent} key=Keys 'pressed'
	public KeyPressedEventElements getKeyPressedEventAccess() {
		return pKeyPressedEvent;
	}
	
	public ParserRule getKeyPressedEventRule() {
		return getKeyPressedEventAccess().getRule();
	}
	
	//CollisionEvent Event:
	//	{CollisionEvent}
	//	'collides' 'with' target=[SpriteActor]
	public CollisionEventElements getCollisionEventAccess() {
		return pCollisionEvent;
	}
	
	public ParserRule getCollisionEventRule() {
		return getCollisionEventAccess().getRule();
	}
	
	//Statement:
	//	WhileLoop | If | VariableAssignment | ForeverLoop | FunctionCall | Sleep | SendMessage;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//SendMessage Statement:
	//	{SendMessage}
	//	'sendMessage' '(' name=STRING ')'
	public SendMessageElements getSendMessageAccess() {
		return pSendMessage;
	}
	
	public ParserRule getSendMessageRule() {
		return getSendMessageAccess().getRule();
	}
	
	//enum Keys:
	//	A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | SPACE | ENTER;
	public KeysElements getKeysAccess() {
		return eKeys;
	}
	
	public EnumRule getKeysRule() {
		return getKeysAccess().getRule();
	}
	
	//WhileLoop Statement:
	//	{WhileLoop}
	//	'while' predicate=Expression
	//	BEGIN
	//	statements+=Statement*
	//	END
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//If Statement:
	//	{If}
	//	'if' predicate=Expression
	//	BEGIN
	//	ifBlock+=Statement*
	//	END ('else'
	//	BEGIN
	//	elseBlock+=Statement*
	//	END)?
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//ForeverLoop Statement:
	//	{ForeverLoop}
	//	'forever'
	//	BEGIN
	//	statements+=Statement*
	//	END
	public ForeverLoopElements getForeverLoopAccess() {
		return pForeverLoop;
	}
	
	public ParserRule getForeverLoopRule() {
		return getForeverLoopAccess().getRule();
	}
	
	//VariableDeclaration:
	//	'var' name=ID '=' expression=Expression;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableAssignment:
	//	variableName=ID '=' expression=Expression;
	public VariableAssignmentElements getVariableAssignmentAccess() {
		return pVariableAssignment;
	}
	
	public ParserRule getVariableAssignmentRule() {
		return getVariableAssignmentAccess().getRule();
	}
	
	//Sleep Statement:
	//	{Sleep}
	//	'sleep' '(' duration=Expression ')'
	public SleepElements getSleepAccess() {
		return pSleep;
	}
	
	public ParserRule getSleepRule() {
		return getSleepAccess().getRule();
	}
	
	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} 'or' right=And)*
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Comparison ({And.left=current} 'and' right=Comparison)*
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Plus Expression:
	//	Minus ({Plus.left=current} '+' right=Minus)*
	public PlusElements getPlusAccess() {
		return pPlus;
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}
	
	//Minus Expression:
	//	Multiply ({Minus.left=current} '-' right=Multiply)*
	public MinusElements getMinusAccess() {
		return pMinus;
	}
	
	public ParserRule getMinusRule() {
		return getMinusAccess().getRule();
	}
	
	//Multiply Expression:
	//	Divide ({Multiply.left=current} '*' right=Divide)*
	public MultiplyElements getMultiplyAccess() {
		return pMultiply;
	}
	
	public ParserRule getMultiplyRule() {
		return getMultiplyAccess().getRule();
	}
	
	//Divide Expression:
	//	PrimaryExpression ({Divide.left=current} '/' right=PrimaryExpression)*
	public DivideElements getDivideAccess() {
		return pDivide;
	}
	
	public ParserRule getDivideRule() {
		return getDivideAccess().getRule();
	}
	
	//Comparison Expression:
	//	Plus (('<' {LessThan.left=current} |
	//	'==' {Equal.left=current} |
	//	'>' {GreaterThan.left=current} |
	//	'<=' {LessThanOrEqual.left=current} |
	//	'>=' {GreaterThanOrEqual.left=current}) right=Plus)*
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//FunctionCall:
	//	name=ID '(' (parameters+=Expression (',' parameters+=Expression)*)? ')';
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	'(' Expression ')' | {Not} 'not' expression=PrimaryExpression | {UnaryMinus} '-' expression=PrimaryExpression |
	//	{ToDouble} 'double' '(' expression=PrimaryExpression ')' | {ToInt} 'int' '(' expression=PrimaryExpression ')' |
	//	FunctionCall | AtomicExpression
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//AtomicExpression Expression:
	//	{BooleanLiteral} (value?='true' | 'false') | {DoubleLiteral} value=DECIMAL | {IntegerLiteral} value=INT |
	//	{StringLiteral} value=STRING | {VariableReference} variableName=ID
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//terminal BEGIN:
	//	'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//	'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//DECIMAL ecore::EDouble:
	//	INT '.' INT
	public DECIMALElements getDECIMALAccess() {
		return pDECIMAL;
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
