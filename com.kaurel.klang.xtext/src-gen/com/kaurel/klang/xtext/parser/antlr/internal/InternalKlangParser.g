/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
parser grammar InternalKlangParser;

options {
	tokenVocab=InternalKlangLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package com.kaurel.klang.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.kaurel.klang.xtext.services.KlangGrammarAccess;

}

@members {

 	private KlangGrammarAccess grammarAccess;

    public InternalKlangParser(TokenStream input, KlangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected KlangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getSceneActorSceneActorParserRuleCall_0_0());
				}
				lv_sceneActor_0_0=ruleSceneActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"sceneActor",
						lv_sceneActor_0_0,
						"com.kaurel.klang.xtext.Klang.SceneActor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getSpriteActorsSpriteActorParserRuleCall_1_0());
				}
				lv_spriteActors_1_0=ruleSpriteActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"spriteActors",
						lv_spriteActors_1_0,
						"com.kaurel.klang.xtext.Klang.SpriteActor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSceneActor
entryRuleSceneActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSceneActorRule()); }
	iv_ruleSceneActor=ruleSceneActor
	{ $current=$iv_ruleSceneActor.current; }
	EOF;

// Rule SceneActor
ruleSceneActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSceneActorAccess().getSceneActorAction_0(),
					$current);
			}
		)
		otherlv_1=Scene
		{
			newLeafNode(otherlv_1, grammarAccess.getSceneActorAccess().getSceneKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getSceneActorAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSceneActorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			this_BEGIN_3=RULE_BEGIN
			{
				newLeafNode(this_BEGIN_3, grammarAccess.getSceneActorAccess().getBEGINTerminalRuleCall_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSceneActorAccess().getLocalVariablesVariableDeclarationParserRuleCall_3_1_0());
					}
					lv_localVariables_4_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSceneActorRule());
						}
						add(
							$current,
							"localVariables",
							lv_localVariables_4_0,
							"com.kaurel.klang.xtext.Klang.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getSceneActorAccess().getEventHandlersEventHandlerParserRuleCall_3_2_0());
					}
					lv_eventHandlers_5_0=ruleEventHandler
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSceneActorRule());
						}
						add(
							$current,
							"eventHandlers",
							lv_eventHandlers_5_0,
							"com.kaurel.klang.xtext.Klang.EventHandler");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			this_END_6=RULE_END
			{
				newLeafNode(this_END_6, grammarAccess.getSceneActorAccess().getENDTerminalRuleCall_3_3());
			}
		)?
	)
;

// Entry rule entryRuleSpriteActor
entryRuleSpriteActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpriteActorRule()); }
	iv_ruleSpriteActor=ruleSpriteActor
	{ $current=$iv_ruleSpriteActor.current; }
	EOF;

// Rule SpriteActor
ruleSpriteActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSpriteActorAccess().getSpriteActorAction_0(),
					$current);
			}
		)
		otherlv_1=Sprite
		{
			newLeafNode(otherlv_1, grammarAccess.getSpriteActorAccess().getSpriteKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getSpriteActorAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpriteActorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			this_BEGIN_3=RULE_BEGIN
			{
				newLeafNode(this_BEGIN_3, grammarAccess.getSpriteActorAccess().getBEGINTerminalRuleCall_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSpriteActorAccess().getLocalVariablesVariableDeclarationParserRuleCall_3_1_0());
					}
					lv_localVariables_4_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpriteActorRule());
						}
						add(
							$current,
							"localVariables",
							lv_localVariables_4_0,
							"com.kaurel.klang.xtext.Klang.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getSpriteActorAccess().getEventHandlersEventHandlerParserRuleCall_3_2_0());
					}
					lv_eventHandlers_5_0=ruleEventHandler
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpriteActorRule());
						}
						add(
							$current,
							"eventHandlers",
							lv_eventHandlers_5_0,
							"com.kaurel.klang.xtext.Klang.EventHandler");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			this_END_6=RULE_END
			{
				newLeafNode(this_END_6, grammarAccess.getSpriteActorAccess().getENDTerminalRuleCall_3_3());
			}
		)?
	)
;

// Entry rule entryRuleEventHandler
entryRuleEventHandler returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventHandlerRule()); }
	iv_ruleEventHandler=ruleEventHandler
	{ $current=$iv_ruleEventHandler.current; }
	EOF;

// Rule EventHandler
ruleEventHandler returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=When
		{
			newLeafNode(otherlv_0, grammarAccess.getEventHandlerAccess().getWhenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventHandlerAccess().getReferenceEventEventParserRuleCall_1_0());
				}
				lv_referenceEvent_1_0=ruleEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventHandlerRule());
					}
					set(
						$current,
						"referenceEvent",
						lv_referenceEvent_1_0,
						"com.kaurel.klang.xtext.Klang.Event");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_BEGIN_2=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_2, grammarAccess.getEventHandlerAccess().getBEGINTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEventHandlerAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventHandlerRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"com.kaurel.klang.xtext.Klang.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_END_4=RULE_END
		{
			newLeafNode(this_END_4, grammarAccess.getEventHandlerAccess().getENDTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEventAccess().getCollisionEventParserRuleCall_0());
		}
		this_CollisionEvent_0=ruleCollisionEvent
		{
			$current = $this_CollisionEvent_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEventAccess().getKeyPressedEventParserRuleCall_1());
		}
		this_KeyPressedEvent_1=ruleKeyPressedEvent
		{
			$current = $this_KeyPressedEvent_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEventAccess().getMessageReceivedEventParserRuleCall_2());
		}
		this_MessageReceivedEvent_2=ruleMessageReceivedEvent
		{
			$current = $this_MessageReceivedEvent_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEventAccess().getGameStartEventParserRuleCall_3());
		}
		this_GameStartEvent_3=ruleGameStartEvent
		{
			$current = $this_GameStartEvent_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEventAccess().getClickEventParserRuleCall_4());
		}
		this_ClickEvent_4=ruleClickEvent
		{
			$current = $this_ClickEvent_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMessageReceivedEvent
entryRuleMessageReceivedEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageReceivedEventRule()); }
	iv_ruleMessageReceivedEvent=ruleMessageReceivedEvent
	{ $current=$iv_ruleMessageReceivedEvent.current; }
	EOF;

// Rule MessageReceivedEvent
ruleMessageReceivedEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMessageReceivedEventAccess().getMessageReceivedEventAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMessageReceivedEventAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMessageReceivedEventRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=Received
		{
			newLeafNode(otherlv_2, grammarAccess.getMessageReceivedEventAccess().getReceivedKeyword_2());
		}
	)
;

// Entry rule entryRuleGameStartEvent
entryRuleGameStartEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGameStartEventRule()); }
	iv_ruleGameStartEvent=ruleGameStartEvent
	{ $current=$iv_ruleGameStartEvent.current; }
	EOF;

// Rule GameStartEvent
ruleGameStartEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGameStartEventAccess().getGameStartEventAction_0(),
					$current);
			}
		)
		otherlv_1=Game
		{
			newLeafNode(otherlv_1, grammarAccess.getGameStartEventAccess().getGameKeyword_1());
		}
		otherlv_2=Starts
		{
			newLeafNode(otherlv_2, grammarAccess.getGameStartEventAccess().getStartsKeyword_2());
		}
	)
;

// Entry rule entryRuleClickEvent
entryRuleClickEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClickEventRule()); }
	iv_ruleClickEvent=ruleClickEvent
	{ $current=$iv_ruleClickEvent.current; }
	EOF;

// Rule ClickEvent
ruleClickEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getClickEventAccess().getClickEventAction_0(),
					$current);
			}
		)
		otherlv_1=Clicked
		{
			newLeafNode(otherlv_1, grammarAccess.getClickEventAccess().getClickedKeyword_1());
		}
	)
;

// Entry rule entryRuleKeyPressedEvent
entryRuleKeyPressedEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyPressedEventRule()); }
	iv_ruleKeyPressedEvent=ruleKeyPressedEvent
	{ $current=$iv_ruleKeyPressedEvent.current; }
	EOF;

// Rule KeyPressedEvent
ruleKeyPressedEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getKeyPressedEventAccess().getKeyPressEventAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyPressedEventAccess().getKeyKeysEnumRuleCall_1_0());
				}
				lv_key_1_0=ruleKeys
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyPressedEventRule());
					}
					set(
						$current,
						"key",
						lv_key_1_0,
						"com.kaurel.klang.xtext.Klang.Keys");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=Pressed
		{
			newLeafNode(otherlv_2, grammarAccess.getKeyPressedEventAccess().getPressedKeyword_2());
		}
	)
;

// Entry rule entryRuleCollisionEvent
entryRuleCollisionEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollisionEventRule()); }
	iv_ruleCollisionEvent=ruleCollisionEvent
	{ $current=$iv_ruleCollisionEvent.current; }
	EOF;

// Rule CollisionEvent
ruleCollisionEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCollisionEventAccess().getCollisionEventAction_0(),
					$current);
			}
		)
		otherlv_1=Collides
		{
			newLeafNode(otherlv_1, grammarAccess.getCollisionEventAccess().getCollidesKeyword_1());
		}
		otherlv_2=With
		{
			newLeafNode(otherlv_2, grammarAccess.getCollisionEventAccess().getWithKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCollisionEventRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getCollisionEventAccess().getTargetSpriteActorCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileLoopParserRuleCall_0());
		}
		this_WhileLoop_0=ruleWhileLoop
		{
			$current = $this_WhileLoop_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfParserRuleCall_1());
		}
		this_If_1=ruleIf
		{
			$current = $this_If_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getVariableAssignmentParserRuleCall_2());
		}
		this_VariableAssignment_2=ruleVariableAssignment
		{
			$current = $this_VariableAssignment_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForeverLoopParserRuleCall_3());
		}
		this_ForeverLoop_3=ruleForeverLoop
		{
			$current = $this_ForeverLoop_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_4());
		}
		this_FunctionCall_4=ruleFunctionCall
		{
			$current = $this_FunctionCall_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSleepParserRuleCall_5());
		}
		this_Sleep_5=ruleSleep
		{
			$current = $this_Sleep_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSendMessageParserRuleCall_6());
		}
		this_SendMessage_6=ruleSendMessage
		{
			$current = $this_SendMessage_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSendMessage
entryRuleSendMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSendMessageRule()); }
	iv_ruleSendMessage=ruleSendMessage
	{ $current=$iv_ruleSendMessage.current; }
	EOF;

// Rule SendMessage
ruleSendMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSendMessageAccess().getSendMessageAction_0(),
					$current);
			}
		)
		otherlv_1=SendMessage
		{
			newLeafNode(otherlv_1, grammarAccess.getSendMessageAccess().getSendMessageKeyword_1());
		}
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getSendMessageAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_STRING
				{
					newLeafNode(lv_name_3_0, grammarAccess.getSendMessageAccess().getNameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSendMessageRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4=RightParenthesis
		{
			newLeafNode(otherlv_4, grammarAccess.getSendMessageAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleWhileLoop
entryRuleWhileLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileLoopRule()); }
	iv_ruleWhileLoop=ruleWhileLoop
	{ $current=$iv_ruleWhileLoop.current; }
	EOF;

// Rule WhileLoop
ruleWhileLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWhileLoopAccess().getWhileLoopAction_0(),
					$current);
			}
		)
		otherlv_1=While
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileLoopAccess().getWhileKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileLoopAccess().getPredicateExpressionParserRuleCall_2_0());
				}
				lv_predicate_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_2_0,
						"com.kaurel.klang.xtext.Klang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_BEGIN_3=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_3, grammarAccess.getWhileLoopAccess().getBEGINTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileLoopAccess().getStatementsStatementParserRuleCall_4_0());
				}
				lv_statements_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
					}
					add(
						$current,
						"statements",
						lv_statements_4_0,
						"com.kaurel.klang.xtext.Klang.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_END_5=RULE_END
		{
			newLeafNode(this_END_5, grammarAccess.getWhileLoopAccess().getENDTerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfAccess().getIfAction_0(),
					$current);
			}
		)
		otherlv_1=If
		{
			newLeafNode(otherlv_1, grammarAccess.getIfAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getPredicateExpressionParserRuleCall_2_0());
				}
				lv_predicate_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_2_0,
						"com.kaurel.klang.xtext.Klang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_BEGIN_3=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_3, grammarAccess.getIfAccess().getBEGINTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getIfBlockStatementParserRuleCall_4_0());
				}
				lv_ifBlock_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					add(
						$current,
						"ifBlock",
						lv_ifBlock_4_0,
						"com.kaurel.klang.xtext.Klang.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_END_5=RULE_END
		{
			newLeafNode(this_END_5, grammarAccess.getIfAccess().getENDTerminalRuleCall_5());
		}
		(
			otherlv_6=Else
			{
				newLeafNode(otherlv_6, grammarAccess.getIfAccess().getElseKeyword_6_0());
			}
			this_BEGIN_7=RULE_BEGIN
			{
				newLeafNode(this_BEGIN_7, grammarAccess.getIfAccess().getBEGINTerminalRuleCall_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfAccess().getElseBlockStatementParserRuleCall_6_2_0());
					}
					lv_elseBlock_8_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfRule());
						}
						add(
							$current,
							"elseBlock",
							lv_elseBlock_8_0,
							"com.kaurel.klang.xtext.Klang.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			this_END_9=RULE_END
			{
				newLeafNode(this_END_9, grammarAccess.getIfAccess().getENDTerminalRuleCall_6_3());
			}
		)?
	)
;

// Entry rule entryRuleForeverLoop
entryRuleForeverLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForeverLoopRule()); }
	iv_ruleForeverLoop=ruleForeverLoop
	{ $current=$iv_ruleForeverLoop.current; }
	EOF;

// Rule ForeverLoop
ruleForeverLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForeverLoopAccess().getForeverLoopAction_0(),
					$current);
			}
		)
		otherlv_1=Forever
		{
			newLeafNode(otherlv_1, grammarAccess.getForeverLoopAccess().getForeverKeyword_1());
		}
		this_BEGIN_2=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_2, grammarAccess.getForeverLoopAccess().getBEGINTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForeverLoopAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForeverLoopRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"com.kaurel.klang.xtext.Klang.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_END_4=RULE_END
		{
			newLeafNode(this_END_4, grammarAccess.getForeverLoopAccess().getENDTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Var
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=EqualsSign
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"com.kaurel.klang.xtext.Klang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariableAssignment
entryRuleVariableAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableAssignmentRule()); }
	iv_ruleVariableAssignment=ruleVariableAssignment
	{ $current=$iv_ruleVariableAssignment.current; }
	EOF;

// Rule VariableAssignment
ruleVariableAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_variableName_0_0=RULE_ID
				{
					newLeafNode(lv_variableName_0_0, grammarAccess.getVariableAssignmentAccess().getVariableNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"variableName",
						lv_variableName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=EqualsSign
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAssignmentAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableAssignmentRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"com.kaurel.klang.xtext.Klang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSleep
entryRuleSleep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSleepRule()); }
	iv_ruleSleep=ruleSleep
	{ $current=$iv_ruleSleep.current; }
	EOF;

// Rule Sleep
ruleSleep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSleepAccess().getSleepAction_0(),
					$current);
			}
		)
		otherlv_1=Sleep
		{
			newLeafNode(otherlv_1, grammarAccess.getSleepAccess().getSleepKeyword_1());
		}
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getSleepAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSleepAccess().getDurationExpressionParserRuleCall_3_0());
				}
				lv_duration_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSleepRule());
					}
					set(
						$current,
						"duration",
						lv_duration_3_0,
						"com.kaurel.klang.xtext.Klang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=RightParenthesis
		{
			newLeafNode(otherlv_4, grammarAccess.getSleepAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getOrParserRuleCall());
	}
	this_Or_0=ruleOr
	{
		$current = $this_Or_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2=Or
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getOrKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.kaurel.klang.xtext.Klang.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2=And
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAndKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightComparisonParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.kaurel.klang.xtext.Klang.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlus
entryRulePlus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusRule()); }
	iv_rulePlus=rulePlus
	{ $current=$iv_rulePlus.current; }
	EOF;

// Rule Plus
rulePlus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusAccess().getMinusParserRuleCall_0());
		}
		this_Minus_0=ruleMinus
		{
			$current = $this_Minus_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPlusAccess().getPlusLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2=PlusSign
			{
				newLeafNode(otherlv_2, grammarAccess.getPlusAccess().getPlusSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusAccess().getRightMinusParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.kaurel.klang.xtext.Klang.Minus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMinus
entryRuleMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinusRule()); }
	iv_ruleMinus=ruleMinus
	{ $current=$iv_ruleMinus.current; }
	EOF;

// Rule Minus
ruleMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMinusAccess().getMultiplyParserRuleCall_0());
		}
		this_Multiply_0=ruleMultiply
		{
			$current = $this_Multiply_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMinusAccess().getMinusLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2=HyphenMinus
			{
				newLeafNode(otherlv_2, grammarAccess.getMinusAccess().getHyphenMinusKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMinusAccess().getRightMultiplyParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiply
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMinusRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.kaurel.klang.xtext.Klang.Multiply");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiply
entryRuleMultiply returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplyRule()); }
	iv_ruleMultiply=ruleMultiply
	{ $current=$iv_ruleMultiply.current; }
	EOF;

// Rule Multiply
ruleMultiply returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplyAccess().getDivideParserRuleCall_0());
		}
		this_Divide_0=ruleDivide
		{
			$current = $this_Divide_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplyAccess().getMultiplyLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2=Asterisk
			{
				newLeafNode(otherlv_2, grammarAccess.getMultiplyAccess().getAsteriskKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplyAccess().getRightDivideParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleDivide
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplyRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.kaurel.klang.xtext.Klang.Divide");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDivide
entryRuleDivide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivideRule()); }
	iv_ruleDivide=ruleDivide
	{ $current=$iv_ruleDivide.current; }
	EOF;

// Rule Divide
ruleDivide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDivideAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getDivideAccess().getDivideLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2=Solidus
			{
				newLeafNode(otherlv_2, grammarAccess.getDivideAccess().getSolidusKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDivideAccess().getRightPrimaryExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDivideRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.kaurel.klang.xtext.Klang.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getPlusParserRuleCall_0());
		}
		this_Plus_0=rulePlus
		{
			$current = $this_Plus_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1=LessThanSign
					{
						newLeafNode(otherlv_1, grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getLessThanLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3=EqualsSignEqualsSign
					{
						newLeafNode(otherlv_3, grammarAccess.getComparisonAccess().getEqualsSignEqualsSignKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getEqualLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_5=GreaterThanSign
					{
						newLeafNode(otherlv_5, grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_2_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getGreaterThanLeftAction_1_0_2_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_7=LessThanSignEqualsSign
					{
						newLeafNode(otherlv_7, grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_3_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getLessThanOrEqualLeftAction_1_0_3_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_9=GreaterThanSignEqualsSign
					{
						newLeafNode(otherlv_9, grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_4_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getGreaterThanOrEqualLeftAction_1_0_4_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightPlusParserRuleCall_1_1_0());
					}
					lv_right_11_0=rulePlus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_11_0,
							"com.kaurel.klang.xtext.Klang.Plus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFunctionCallAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_2_0_0());
					}
					lv_parameters_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"com.kaurel.klang.xtext.Klang.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=Comma
				{
					newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_2_1_1_0());
						}
						lv_parameters_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"com.kaurel.klang.xtext.Klang.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=RightParenthesis
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=LeftParenthesis
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=RightParenthesis
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getNotAction_1_0(),
						$current);
				}
			)
			otherlv_4=Not
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getNotKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_1_2_0());
					}
					lv_expression_5_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"com.kaurel.klang.xtext.Klang.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getUnaryMinusAction_2_0(),
						$current);
				}
			)
			otherlv_7=HyphenMinus
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryExpressionAccess().getHyphenMinusKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_2_2_0());
					}
					lv_expression_8_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_8_0,
							"com.kaurel.klang.xtext.Klang.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getToDoubleAction_3_0(),
						$current);
				}
			)
			otherlv_10=Double
			{
				newLeafNode(otherlv_10, grammarAccess.getPrimaryExpressionAccess().getDoubleKeyword_3_1());
			}
			otherlv_11=LeftParenthesis
			{
				newLeafNode(otherlv_11, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_3_3_0());
					}
					lv_expression_12_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_12_0,
							"com.kaurel.klang.xtext.Klang.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_13=RightParenthesis
			{
				newLeafNode(otherlv_13, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getToIntAction_4_0(),
						$current);
				}
			)
			otherlv_15=Int
			{
				newLeafNode(otherlv_15, grammarAccess.getPrimaryExpressionAccess().getIntKeyword_4_1());
			}
			otherlv_16=LeftParenthesis
			{
				newLeafNode(otherlv_16, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_4_3_0());
					}
					lv_expression_17_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_17_0,
							"com.kaurel.klang.xtext.Klang.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_18=RightParenthesis
			{
				newLeafNode(otherlv_18, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_4_4());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_5());
		}
		this_FunctionCall_19=ruleFunctionCall
		{
			$current = $this_FunctionCall_19.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getAtomicExpressionParserRuleCall_6());
		}
		this_AtomicExpression_20=ruleAtomicExpression
		{
			$current = $this_AtomicExpression_20.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	iv_ruleAtomicExpression=ruleAtomicExpression
	{ $current=$iv_ruleAtomicExpression.current; }
	EOF;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getBooleanLiteralAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_1_0=True
						{
							newLeafNode(lv_value_1_0, grammarAccess.getAtomicExpressionAccess().getValueTrueKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicExpressionRule());
							}
							setWithLastConsumed($current, "value", true, "true");
						}
					)
				)
				    |
				otherlv_2=False
				{
					newLeafNode(otherlv_2, grammarAccess.getAtomicExpressionAccess().getFalseKeyword_0_1_1());
				}
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getDoubleLiteralAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicExpressionAccess().getValueDECIMALParserRuleCall_1_1_0());
					}
					lv_value_4_0=ruleDECIMAL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"com.kaurel.klang.xtext.Klang.DECIMAL");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getIntegerLiteralAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_6_0=RULE_INT
					{
						newLeafNode(lv_value_6_0, grammarAccess.getAtomicExpressionAccess().getValueINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_6_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getStringLiteralAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_value_8_0=RULE_STRING
					{
						newLeafNode(lv_value_8_0, grammarAccess.getAtomicExpressionAccess().getValueSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_8_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getVariableReferenceAction_4_0(),
						$current);
				}
			)
			(
				(
					lv_variableName_10_0=RULE_ID
					{
						newLeafNode(lv_variableName_10_0, grammarAccess.getAtomicExpressionAccess().getVariableNameIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"variableName",
							lv_variableName_10_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDECIMAL
entryRuleDECIMAL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDECIMALRule()); }
	iv_ruleDECIMAL=ruleDECIMAL
	{ $current=$iv_ruleDECIMAL.current.getText(); }
	EOF;

// Rule DECIMAL
ruleDECIMAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getDECIMALAccess().getINTTerminalRuleCall_0());
		}
		kw=FullStop
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDECIMALAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getDECIMALAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Rule Keys
ruleKeys returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=A
			{
				$current = grammarAccess.getKeysAccess().getAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getKeysAccess().getAEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=B
			{
				$current = grammarAccess.getKeysAccess().getBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getKeysAccess().getBEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=C
			{
				$current = grammarAccess.getKeysAccess().getCEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getKeysAccess().getCEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=D
			{
				$current = grammarAccess.getKeysAccess().getDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getKeysAccess().getDEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4=E
			{
				$current = grammarAccess.getKeysAccess().getEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getKeysAccess().getEEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5=F
			{
				$current = grammarAccess.getKeysAccess().getFEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getKeysAccess().getFEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6=G
			{
				$current = grammarAccess.getKeysAccess().getGEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getKeysAccess().getGEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7=H
			{
				$current = grammarAccess.getKeysAccess().getHEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getKeysAccess().getHEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8=I
			{
				$current = grammarAccess.getKeysAccess().getIEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getKeysAccess().getIEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9=J
			{
				$current = grammarAccess.getKeysAccess().getJEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getKeysAccess().getJEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10=K
			{
				$current = grammarAccess.getKeysAccess().getKEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getKeysAccess().getKEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11=L
			{
				$current = grammarAccess.getKeysAccess().getLEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getKeysAccess().getLEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12=M
			{
				$current = grammarAccess.getKeysAccess().getMEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getKeysAccess().getMEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13=N
			{
				$current = grammarAccess.getKeysAccess().getNEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getKeysAccess().getNEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14=O
			{
				$current = grammarAccess.getKeysAccess().getOEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getKeysAccess().getOEnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15=P
			{
				$current = grammarAccess.getKeysAccess().getPEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getKeysAccess().getPEnumLiteralDeclaration_15());
			}
		)
		    |
		(
			enumLiteral_16=Q
			{
				$current = grammarAccess.getKeysAccess().getQEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_16, grammarAccess.getKeysAccess().getQEnumLiteralDeclaration_16());
			}
		)
		    |
		(
			enumLiteral_17=R
			{
				$current = grammarAccess.getKeysAccess().getREnumLiteralDeclaration_17().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_17, grammarAccess.getKeysAccess().getREnumLiteralDeclaration_17());
			}
		)
		    |
		(
			enumLiteral_18=S
			{
				$current = grammarAccess.getKeysAccess().getSEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_18, grammarAccess.getKeysAccess().getSEnumLiteralDeclaration_18());
			}
		)
		    |
		(
			enumLiteral_19=T
			{
				$current = grammarAccess.getKeysAccess().getTEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_19, grammarAccess.getKeysAccess().getTEnumLiteralDeclaration_19());
			}
		)
		    |
		(
			enumLiteral_20=U
			{
				$current = grammarAccess.getKeysAccess().getUEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_20, grammarAccess.getKeysAccess().getUEnumLiteralDeclaration_20());
			}
		)
		    |
		(
			enumLiteral_21=V
			{
				$current = grammarAccess.getKeysAccess().getVEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_21, grammarAccess.getKeysAccess().getVEnumLiteralDeclaration_21());
			}
		)
		    |
		(
			enumLiteral_22=W
			{
				$current = grammarAccess.getKeysAccess().getWEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_22, grammarAccess.getKeysAccess().getWEnumLiteralDeclaration_22());
			}
		)
		    |
		(
			enumLiteral_23=X
			{
				$current = grammarAccess.getKeysAccess().getXEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_23, grammarAccess.getKeysAccess().getXEnumLiteralDeclaration_23());
			}
		)
		    |
		(
			enumLiteral_24=Y
			{
				$current = grammarAccess.getKeysAccess().getYEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_24, grammarAccess.getKeysAccess().getYEnumLiteralDeclaration_24());
			}
		)
		    |
		(
			enumLiteral_25=Z
			{
				$current = grammarAccess.getKeysAccess().getZEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_25, grammarAccess.getKeysAccess().getZEnumLiteralDeclaration_25());
			}
		)
		    |
		(
			enumLiteral_26=SPACE
			{
				$current = grammarAccess.getKeysAccess().getSPACEEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_26, grammarAccess.getKeysAccess().getSPACEEnumLiteralDeclaration_26());
			}
		)
		    |
		(
			enumLiteral_27=ENTER
			{
				$current = grammarAccess.getKeysAccess().getENTEREnumLiteralDeclaration_27().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_27, grammarAccess.getKeysAccess().getENTEREnumLiteralDeclaration_27());
			}
		)
	)
;
