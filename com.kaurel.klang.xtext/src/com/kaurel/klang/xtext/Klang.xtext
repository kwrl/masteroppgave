grammar com.kaurel.klang.xtext.Klang with org.eclipse.xtext.common.Terminals

import "http://www.example.org/klang"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Game:
	{Game}
	(variables+=Variable)*
	(actorDefs+=Sprite)*
;

Sprite returns Sprite:
	{Sprite}
	'sprite'	
		name=ID
	BEGIN
		(variables+=Variable)*
		(eventHandlers+=EventHandler)*
	END
;

EventHandler:
	'when'	
		eventType=EventType
	BEGIN
		(statements+=Statement)*
	END
;

enum EventType:
	GAME_STARTED	
;


WhileLoop:
	{WhileLoop}
	'while'	predicate=Expression
	BEGIN	
		(loopBlock+=Statement)*
	END
;

If:
	{If}
	'if' predicate=Expression
	BEGIN	
		(ifBlock+=Statement)*
	END
;

ForeverLoop:
	{ForeverLoop}
	'forever'
	BEGIN
		(loopStatements+=Statement)*
	END
;

Statement:
	ControlStatement | Variable | Assignment | SubroutineCall 
;

SubroutineCall:
	name=ID	'('(parameters+=Expression)? (',' parameters+=Expression)* ')'
;

ControlStatement:
	ForeverLoop | WhileLoop	| Yield | If
;

Yield:
	{Yield}
	'yield'
;

Variable:
	'var' name=ID '=' expression=Expression
;

Assignment:
	variable=[Variable]	'=' expression=Expression
;

Expression:
	Or
;

Or returns Expression:
	And ( {Or.left=current} 'or' right=And)*
;

And returns Expression:
	Comparison ( {And.left=current} 'and' right=Comparison)*
;

Plus returns Expression:
	Minus ({Plus.left=current} '+' right=Minus)*
;

Minus returns Expression:
	Multiply({Minus.left=current} '-' right=Multiply)*
;

Multiply returns Expression:
	Divide({Multiply.left=current} '*' right=Divide)*
;

Divide returns Expression:
	PrimaryExpression({Divide.left=current} '/' right=PrimaryExpression)*
;

Comparison returns Expression: 
	Plus( ('<'{LessThan.left=current} | '=' {Equal.left=current} | '>' {GreaterThan.left=current}) right=Plus)*
;

PrimaryExpression returns Expression:
	'('	Expression')' |
	{Not} NotOp expression=PrimaryExpression |
	AtomicExpression
;

NotOp:
	'!'|'not'
;

AtomicExpression returns Expression:
	{BooleanLiteral} (value?='true'|'false') |
	{NumericLiteral} value=NUMERIC |
	{StringLiteral} value=STRING |
	{VariableRef} variableName=ID
;

terminal BEGIN: 'synthetic:BEGIN';
terminal END:'synthetic:END';

terminal NUMERIC returns ecore::EDouble: 
    ('0'..'9')+;