grammar com.kaurel.klang.xtext.Klang with org.eclipse.xtext.common.Terminals

import "platform:/plugin/com.kaurel.klang.model/model/klang.ecore"
import "platform:/plugin/com.kaurel.klang.model/model/klang-expr.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program:
	sceneActor=SceneActor
	(spriteActors+=SpriteActor)*
;

SceneActor:
	{SceneActor}
	'scene' name=ID
	(
	BEGIN
	(localVariables+=VariableDeclaration)*
	(eventHandlers+=EventHandler)*
	END
	)?
;

SpriteActor returns SpriteActor:
	{SpriteActor}
	'sprite' name=ID
	(
	BEGIN
	(localVariables+=VariableDeclaration)*
	(eventHandlers+=EventHandler)*
	END
	)?
	;

EventHandler:
	'when' referenceEvent=Event
	BEGIN
		(statements+=Statement)*
	END
;

Event returns Event:
	CollisionEvent | KeyPressedEvent | MessageReceivedEvent | GameStartEvent | ClickEvent
;

MessageReceivedEvent returns Event:
	{MessageReceivedEvent}	
	 name=STRING 'received'
;

GameStartEvent returns Event:
	{GameStartEvent}
	'game' 'starts'
;

ClickEvent returns Event:
	{ClickEvent}
	'clicked'
;

KeyPressedEvent returns Event:
	{KeyPressEvent}	
	 key=Keys 'pressed'
;

CollisionEvent returns Event: 
	{CollisionEvent}
	'collides' 'with' target=[SpriteActor]
;

Statement returns Statement:
	WhileLoop | If | VariableAssignment	| ForeverLoop | FunctionCall | Sleep | SendMessage
;

SendMessage returns Statement:
	{SendMessage}
	'sendMessage' '(' name=STRING ')'
;

enum Keys returns Keys:
	A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T| U | V | W | X | Y | Z | SPACE | ENTER
;


WhileLoop returns Statement:
	{WhileLoop}
	'while' predicate=Expression
	BEGIN
	(statements+=Statement)*
	END
;

If returns Statement:
	{If}
	'if' predicate=Expression
	BEGIN
		ifBlock+=Statement*
	END
	(
	'else'
	BEGIN
		elseBlock+=Statement*
	END
	)?
	;

ForeverLoop returns Statement:
	{ForeverLoop}
	'forever'
	BEGIN
	(statements+=Statement)*
	END;

VariableDeclaration:
	'var' name=ID '=' expression=Expression;

VariableAssignment:
	variableName=ID '='	expression=Expression
;

Sleep returns Statement:
	{Sleep}
	'sleep' '(' duration=Expression')'
;

Expression:
	Or;

Or returns Expression:
	And ({Or.left=current} 'or' right=And)*;

And returns Expression:
	Comparison ({And.left=current} 'and' right=Comparison)*;

Plus returns Expression:
	Minus ({Plus.left=current} '+' right=Minus)*;

Minus returns Expression:
	Multiply ({Minus.left=current} '-' right=Multiply)*;

Multiply returns Expression:
	Divide ({Multiply.left=current} '*' right=Divide)*;

Divide returns Expression:
	PrimaryExpression ({Divide.left=current} '/' right=PrimaryExpression)*;

Comparison returns Expression:
	Plus ((
		'<' {LessThan.left=current} | 
		'==' {Equal.left=current} | 
		'>' {GreaterThan.left=current} |
		'<=' {LessThanOrEqual.left=current} |
		'>=' {GreaterThanOrEqual.left=current}) right=Plus 
	)*;

FunctionCall returns FunctionCall:
	name=ID '(' (parameters+=Expression(',' parameters+=Expression)*)? ')';

PrimaryExpression returns Expression:
	'(' Expression ')' |
	{Not} 'not' expression=PrimaryExpression |
	{UnaryMinus} '-' expression=PrimaryExpression |
	FunctionCall |
	AtomicExpression;

AtomicExpression returns Expression:
	{BooleanLiteral} (value?='true' | 'false') |
	{DoubleLiteral} value=DECIMAL |
	{IntegerLiteral} value=INT |
	{StringLiteral} value=STRING |
	{VariableReference} variableName=ID;

terminal BEGIN:
	'synthetic:BEGIN';

terminal END:
	'synthetic:END';

DECIMAL returns ecore::EDouble:
	INT '.' INT
;

