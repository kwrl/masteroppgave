/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package com.kaurel.klang.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.kaurel.klang.xtext.ide.contentassist.antlr.internal.InternalKlangParser;
import com.kaurel.klang.xtext.services.KlangGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class KlangParser extends AbstractContentAssistParser {

	@Inject
	private KlangGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalKlangParser createParser() {
		InternalKlangParser result = new InternalKlangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new KlangTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
					put(grammarAccess.getEventHandlerAccess().getAlternatives(), "rule__EventHandler__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getComparisonAccess().getAlternatives_1_0(), "rule__Comparison__Alternatives_1_0");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getAtomicExpressionAccess().getAlternatives(), "rule__AtomicExpression__Alternatives");
					put(grammarAccess.getAtomicExpressionAccess().getAlternatives_0_1(), "rule__AtomicExpression__Alternatives_0_1");
					put(grammarAccess.getGameAccess().getGroup(), "rule__Game__Group__0");
					put(grammarAccess.getActorAccess().getGroup(), "rule__Actor__Group__0");
					put(grammarAccess.getEntityAccess().getGroup_0(), "rule__Entity__Group_0__0");
					put(grammarAccess.getEntityAccess().getGroup_1(), "rule__Entity__Group_1__0");
					put(grammarAccess.getGameStartAccess().getGroup(), "rule__GameStart__Group__0");
					put(grammarAccess.getSpriteClickedAccess().getGroup(), "rule__SpriteClicked__Group__0");
					put(grammarAccess.getKeyPressedAccess().getGroup(), "rule__KeyPressed__Group__0");
					put(grammarAccess.getCollidesWithAccess().getGroup(), "rule__CollidesWith__Group__0");
					put(grammarAccess.getWhileLoopAccess().getGroup(), "rule__WhileLoop__Group__0");
					put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
					put(grammarAccess.getIfAccess().getGroup_6(), "rule__If__Group_6__0");
					put(grammarAccess.getForeverLoopAccess().getGroup(), "rule__ForeverLoop__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableAssignmentAccess().getGroup(), "rule__VariableAssignment__Group__0");
					put(grammarAccess.getSleepAccess().getGroup(), "rule__Sleep__Group__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getPlusAccess().getGroup(), "rule__Plus__Group__0");
					put(grammarAccess.getPlusAccess().getGroup_1(), "rule__Plus__Group_1__0");
					put(grammarAccess.getMinusAccess().getGroup(), "rule__Minus__Group__0");
					put(grammarAccess.getMinusAccess().getGroup_1(), "rule__Minus__Group_1__0");
					put(grammarAccess.getMultiplyAccess().getGroup(), "rule__Multiply__Group__0");
					put(grammarAccess.getMultiplyAccess().getGroup_1(), "rule__Multiply__Group_1__0");
					put(grammarAccess.getDivideAccess().getGroup(), "rule__Divide__Group__0");
					put(grammarAccess.getDivideAccess().getGroup_1(), "rule__Divide__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0_0(), "rule__Comparison__Group_1_0_0__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0_1(), "rule__Comparison__Group_1_0_1__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0_2(), "rule__Comparison__Group_1_0_2__0");
					put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_2(), "rule__FunctionCall__Group_2__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_2_1(), "rule__FunctionCall__Group_2_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_1(), "rule__PrimaryExpression__Group_1__0");
					put(grammarAccess.getAtomicExpressionAccess().getGroup_0(), "rule__AtomicExpression__Group_0__0");
					put(grammarAccess.getAtomicExpressionAccess().getGroup_1(), "rule__AtomicExpression__Group_1__0");
					put(grammarAccess.getAtomicExpressionAccess().getGroup_2(), "rule__AtomicExpression__Group_2__0");
					put(grammarAccess.getAtomicExpressionAccess().getGroup_3(), "rule__AtomicExpression__Group_3__0");
					put(grammarAccess.getGameAccess().getGlobalVariablesAssignment_1(), "rule__Game__GlobalVariablesAssignment_1");
					put(grammarAccess.getGameAccess().getActorsAssignment_2(), "rule__Game__ActorsAssignment_2");
					put(grammarAccess.getActorAccess().getEntityAssignment_1(), "rule__Actor__EntityAssignment_1");
					put(grammarAccess.getActorAccess().getVariableDeclarationsAssignment_3(), "rule__Actor__VariableDeclarationsAssignment_3");
					put(grammarAccess.getActorAccess().getEventHandlersAssignment_4(), "rule__Actor__EventHandlersAssignment_4");
					put(grammarAccess.getEntityAccess().getNameAssignment_0_2(), "rule__Entity__NameAssignment_0_2");
					put(grammarAccess.getGameStartAccess().getStatementsAssignment_5(), "rule__GameStart__StatementsAssignment_5");
					put(grammarAccess.getSpriteClickedAccess().getStatementsAssignment_4(), "rule__SpriteClicked__StatementsAssignment_4");
					put(grammarAccess.getKeyPressedAccess().getKeyAssignment_2(), "rule__KeyPressed__KeyAssignment_2");
					put(grammarAccess.getKeyPressedAccess().getStatementsAssignment_6(), "rule__KeyPressed__StatementsAssignment_6");
					put(grammarAccess.getCollidesWithAccess().getTargetAssignment_4(), "rule__CollidesWith__TargetAssignment_4");
					put(grammarAccess.getCollidesWithAccess().getStatementsAssignment_6(), "rule__CollidesWith__StatementsAssignment_6");
					put(grammarAccess.getWhileLoopAccess().getPredicateAssignment_2(), "rule__WhileLoop__PredicateAssignment_2");
					put(grammarAccess.getWhileLoopAccess().getLoopBlockAssignment_4(), "rule__WhileLoop__LoopBlockAssignment_4");
					put(grammarAccess.getIfAccess().getPredicateAssignment_2(), "rule__If__PredicateAssignment_2");
					put(grammarAccess.getIfAccess().getIfBlockAssignment_4(), "rule__If__IfBlockAssignment_4");
					put(grammarAccess.getIfAccess().getElseBlockAssignment_6_2(), "rule__If__ElseBlockAssignment_6_2");
					put(grammarAccess.getForeverLoopAccess().getLoopStatementsAssignment_3(), "rule__ForeverLoop__LoopStatementsAssignment_3");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getVariableAccess().getExpressionAssignment_3(), "rule__Variable__ExpressionAssignment_3");
					put(grammarAccess.getVariableAssignmentAccess().getVariableNameAssignment_0(), "rule__VariableAssignment__VariableNameAssignment_0");
					put(grammarAccess.getVariableAssignmentAccess().getExpressionAssignment_2(), "rule__VariableAssignment__ExpressionAssignment_2");
					put(grammarAccess.getSleepAccess().getDurationAssignment_3(), "rule__Sleep__DurationAssignment_3");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getPlusAccess().getRightAssignment_1_2(), "rule__Plus__RightAssignment_1_2");
					put(grammarAccess.getMinusAccess().getRightAssignment_1_2(), "rule__Minus__RightAssignment_1_2");
					put(grammarAccess.getMultiplyAccess().getRightAssignment_1_2(), "rule__Multiply__RightAssignment_1_2");
					put(grammarAccess.getDivideAccess().getRightAssignment_1_2(), "rule__Divide__RightAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_1(), "rule__Comparison__RightAssignment_1_1");
					put(grammarAccess.getFunctionCallAccess().getNameAssignment_0(), "rule__FunctionCall__NameAssignment_0");
					put(grammarAccess.getFunctionCallAccess().getParametersAssignment_2_0(), "rule__FunctionCall__ParametersAssignment_2_0");
					put(grammarAccess.getFunctionCallAccess().getParametersAssignment_2_1_1(), "rule__FunctionCall__ParametersAssignment_2_1_1");
					put(grammarAccess.getPrimaryExpressionAccess().getExpressionAssignment_1_2(), "rule__PrimaryExpression__ExpressionAssignment_1_2");
					put(grammarAccess.getAtomicExpressionAccess().getValueAssignment_0_1_0(), "rule__AtomicExpression__ValueAssignment_0_1_0");
					put(grammarAccess.getAtomicExpressionAccess().getValueAssignment_1_1(), "rule__AtomicExpression__ValueAssignment_1_1");
					put(grammarAccess.getAtomicExpressionAccess().getValueAssignment_2_1(), "rule__AtomicExpression__ValueAssignment_2_1");
					put(grammarAccess.getAtomicExpressionAccess().getVariableNameAssignment_3_1(), "rule__AtomicExpression__VariableNameAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalKlangParser typedParser = (InternalKlangParser) parser;
			typedParser.entryRuleGame();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public KlangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(KlangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
