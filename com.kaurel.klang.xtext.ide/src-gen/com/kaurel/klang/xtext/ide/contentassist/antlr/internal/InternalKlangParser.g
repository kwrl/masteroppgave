/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
parser grammar InternalKlangParser;

options {
	tokenVocab=InternalKlangLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package com.kaurel.klang.xtext.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.kaurel.klang.xtext.services.KlangGrammarAccess;

}
@members {
	private KlangGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("EqualsSignEqualsSign", "'=='");
		tokenNameToValue.put("If", "'if'");
		tokenNameToValue.put("Or", "'or'");
		tokenNameToValue.put("And", "'and'");
		tokenNameToValue.put("Key", "'key'");
		tokenNameToValue.put("Not", "'not'");
		tokenNameToValue.put("Var", "'var'");
		tokenNameToValue.put("Game", "'game'");
		tokenNameToValue.put("This", "'this'");
		tokenNameToValue.put("True", "'true'");
		tokenNameToValue.put("When", "'when'");
		tokenNameToValue.put("With", "'with'");
		tokenNameToValue.put("False", "'false'");
		tokenNameToValue.put("Scene", "'scene'");
		tokenNameToValue.put("While", "'while'");
		tokenNameToValue.put("Yield", "'yield'");
		tokenNameToValue.put("Sprite", "'sprite'");
		tokenNameToValue.put("Starts", "'starts'");
		tokenNameToValue.put("Clicked", "'clicked'");
		tokenNameToValue.put("Forever", "'forever'");
		tokenNameToValue.put("Pressed", "'pressed'");
		tokenNameToValue.put("Collides", "'collides'");
	}

	public void setGrammarAccess(KlangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleGame
entryRuleGame
:
{ before(grammarAccess.getGameRule()); }
	 ruleGame
{ after(grammarAccess.getGameRule()); } 
	 EOF 
;

// Rule Game
ruleGame 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGameAccess().getGroup()); }
		(rule__Game__Group__0)
		{ after(grammarAccess.getGameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActor
entryRuleActor
:
{ before(grammarAccess.getActorRule()); }
	 ruleActor
{ after(grammarAccess.getActorRule()); } 
	 EOF 
;

// Rule Actor
ruleActor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActorAccess().getGroup()); }
		(rule__Actor__Group__0)
		{ after(grammarAccess.getActorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntity
entryRuleEntity
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntityAccess().getAlternatives()); }
		(rule__Entity__Alternatives)
		{ after(grammarAccess.getEntityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEventHandler
entryRuleEventHandler
:
{ before(grammarAccess.getEventHandlerRule()); }
	 ruleEventHandler
{ after(grammarAccess.getEventHandlerRule()); } 
	 EOF 
;

// Rule EventHandler
ruleEventHandler 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventHandlerAccess().getAlternatives()); }
		(rule__EventHandler__Alternatives)
		{ after(grammarAccess.getEventHandlerAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGameStart
entryRuleGameStart
:
{ before(grammarAccess.getGameStartRule()); }
	 ruleGameStart
{ after(grammarAccess.getGameStartRule()); } 
	 EOF 
;

// Rule GameStart
ruleGameStart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGameStartAccess().getGroup()); }
		(rule__GameStart__Group__0)
		{ after(grammarAccess.getGameStartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpriteClicked
entryRuleSpriteClicked
:
{ before(grammarAccess.getSpriteClickedRule()); }
	 ruleSpriteClicked
{ after(grammarAccess.getSpriteClickedRule()); } 
	 EOF 
;

// Rule SpriteClicked
ruleSpriteClicked 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpriteClickedAccess().getGroup()); }
		(rule__SpriteClicked__Group__0)
		{ after(grammarAccess.getSpriteClickedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKeyPressed
entryRuleKeyPressed
:
{ before(grammarAccess.getKeyPressedRule()); }
	 ruleKeyPressed
{ after(grammarAccess.getKeyPressedRule()); } 
	 EOF 
;

// Rule KeyPressed
ruleKeyPressed 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyPressedAccess().getGroup()); }
		(rule__KeyPressed__Group__0)
		{ after(grammarAccess.getKeyPressedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollidesWith
entryRuleCollidesWith
:
{ before(grammarAccess.getCollidesWithRule()); }
	 ruleCollidesWith
{ after(grammarAccess.getCollidesWithRule()); } 
	 EOF 
;

// Rule CollidesWith
ruleCollidesWith 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollidesWithAccess().getGroup()); }
		(rule__CollidesWith__Group__0)
		{ after(grammarAccess.getCollidesWithAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileLoop
entryRuleWhileLoop
:
{ before(grammarAccess.getWhileLoopRule()); }
	 ruleWhileLoop
{ after(grammarAccess.getWhileLoopRule()); } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileLoopAccess().getGroup()); }
		(rule__WhileLoop__Group__0)
		{ after(grammarAccess.getWhileLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForeverLoop
entryRuleForeverLoop
:
{ before(grammarAccess.getForeverLoopRule()); }
	 ruleForeverLoop
{ after(grammarAccess.getForeverLoopRule()); } 
	 EOF 
;

// Rule ForeverLoop
ruleForeverLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForeverLoopAccess().getGroup()); }
		(rule__ForeverLoop__Group__0)
		{ after(grammarAccess.getForeverLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableAssignment
entryRuleVariableAssignment
:
{ before(grammarAccess.getVariableAssignmentRule()); }
	 ruleVariableAssignment
{ after(grammarAccess.getVariableAssignmentRule()); } 
	 EOF 
;

// Rule VariableAssignment
ruleVariableAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAssignmentAccess().getGroup()); }
		(rule__VariableAssignment__Group__0)
		{ after(grammarAccess.getVariableAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
		ruleOr
		{ after(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlus
entryRulePlus
:
{ before(grammarAccess.getPlusRule()); }
	 rulePlus
{ after(grammarAccess.getPlusRule()); } 
	 EOF 
;

// Rule Plus
rulePlus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusAccess().getGroup()); }
		(rule__Plus__Group__0)
		{ after(grammarAccess.getPlusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMinus
entryRuleMinus
:
{ before(grammarAccess.getMinusRule()); }
	 ruleMinus
{ after(grammarAccess.getMinusRule()); } 
	 EOF 
;

// Rule Minus
ruleMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinusAccess().getGroup()); }
		(rule__Minus__Group__0)
		{ after(grammarAccess.getMinusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiply
entryRuleMultiply
:
{ before(grammarAccess.getMultiplyRule()); }
	 ruleMultiply
{ after(grammarAccess.getMultiplyRule()); } 
	 EOF 
;

// Rule Multiply
ruleMultiply 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplyAccess().getGroup()); }
		(rule__Multiply__Group__0)
		{ after(grammarAccess.getMultiplyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDivide
entryRuleDivide
:
{ before(grammarAccess.getDivideRule()); }
	 ruleDivide
{ after(grammarAccess.getDivideRule()); } 
	 EOF 
;

// Rule Divide
ruleDivide 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDivideAccess().getGroup()); }
		(rule__Divide__Group__0)
		{ after(grammarAccess.getDivideAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression
:
{ before(grammarAccess.getAtomicExpressionRule()); }
	 ruleAtomicExpression
{ after(grammarAccess.getAtomicExpressionRule()); } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
		(rule__AtomicExpression__Alternatives)
		{ after(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getGroup_0()); }
		(rule__Entity__Group_0__0)
		{ after(grammarAccess.getEntityAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getEntityAccess().getGroup_1()); }
		(rule__Entity__Group_1__0)
		{ after(grammarAccess.getEntityAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventHandlerAccess().getGameStartParserRuleCall_0()); }
		ruleGameStart
		{ after(grammarAccess.getEventHandlerAccess().getGameStartParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEventHandlerAccess().getSpriteClickedParserRuleCall_1()); }
		ruleSpriteClicked
		{ after(grammarAccess.getEventHandlerAccess().getSpriteClickedParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getEventHandlerAccess().getKeyPressedParserRuleCall_2()); }
		ruleKeyPressed
		{ after(grammarAccess.getEventHandlerAccess().getKeyPressedParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getEventHandlerAccess().getCollidesWithParserRuleCall_3()); }
		ruleCollidesWith
		{ after(grammarAccess.getEventHandlerAccess().getCollidesWithParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getWhileLoopParserRuleCall_0()); }
		ruleWhileLoop
		{ after(grammarAccess.getStatementAccess().getWhileLoopParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIfParserRuleCall_1()); }
		ruleIf
		{ after(grammarAccess.getStatementAccess().getIfParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getVariableAssignmentParserRuleCall_2()); }
		ruleVariableAssignment
		{ after(grammarAccess.getStatementAccess().getVariableAssignmentParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForeverLoopParserRuleCall_3()); }
		ruleForeverLoop
		{ after(grammarAccess.getStatementAccess().getForeverLoopParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_4()); }
		ruleFunctionCall
		{ after(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
		(rule__Comparison__Group_1_0_0__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0_1()); }
		(rule__Comparison__Group_1_0_1__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0_2()); }
		(rule__Comparison__Group_1_0_2__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
		(rule__PrimaryExpression__Group_0__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
		(rule__PrimaryExpression__Group_1__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_2()); }
		ruleFunctionCall
		{ after(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAtomicExpressionParserRuleCall_3()); }
		ruleAtomicExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getAtomicExpressionParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_0()); }
		(rule__AtomicExpression__Group_0__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_1()); }
		(rule__AtomicExpression__Group_1__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
		(rule__AtomicExpression__Group_2__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_3()); }
		(rule__AtomicExpression__Group_3__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Alternatives_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueAssignment_0_1_0()); }
		(rule__AtomicExpression__ValueAssignment_0_1_0)
		{ after(grammarAccess.getAtomicExpressionAccess().getValueAssignment_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getFalseKeyword_0_1_1()); }
		False
		{ after(grammarAccess.getAtomicExpressionAccess().getFalseKeyword_0_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__0__Impl
	rule__Game__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getGameAction_0()); }
	()
	{ after(grammarAccess.getGameAccess().getGameAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__1__Impl
	rule__Game__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getVariableDeclarationsAssignment_1()); }
	(rule__Game__VariableDeclarationsAssignment_1)*
	{ after(grammarAccess.getGameAccess().getVariableDeclarationsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Game__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameAccess().getActorDefsAssignment_2()); }
	(rule__Game__ActorDefsAssignment_2)*
	{ after(grammarAccess.getGameAccess().getActorDefsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__0__Impl
	rule__Actor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getActorAction_0()); }
	()
	{ after(grammarAccess.getActorAccess().getActorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__1__Impl
	rule__Actor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getEntityAssignment_1()); }
	(rule__Actor__EntityAssignment_1)
	{ after(grammarAccess.getActorAccess().getEntityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__2__Impl
	rule__Actor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getBEGINTerminalRuleCall_2()); }
	RULE_BEGIN
	{ after(grammarAccess.getActorAccess().getBEGINTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__3__Impl
	rule__Actor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getVariableDeclarationsAssignment_3()); }
	(rule__Actor__VariableDeclarationsAssignment_3)*
	{ after(grammarAccess.getActorAccess().getVariableDeclarationsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__4__Impl
	rule__Actor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getEventHandlersAssignment_4()); }
	(rule__Actor__EventHandlersAssignment_4)*
	{ after(grammarAccess.getActorAccess().getEventHandlersAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actor__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActorAccess().getENDTerminalRuleCall_5()); }
	RULE_END
	{ after(grammarAccess.getActorAccess().getENDTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_0__0__Impl
	rule__Entity__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getSpriteKeyword_0_0()); }
	Sprite
	{ after(grammarAccess.getEntityAccess().getSpriteKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_0__1__Impl
	rule__Entity__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getSpriteEntityAction_0_1()); }
	()
	{ after(grammarAccess.getEntityAccess().getSpriteEntityAction_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getNameAssignment_0_2()); }
	(rule__Entity__NameAssignment_0_2)
	{ after(grammarAccess.getEntityAccess().getNameAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_1__0__Impl
	rule__Entity__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getSceneKeyword_1_0()); }
	Scene
	{ after(grammarAccess.getEntityAccess().getSceneKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getSceneEntityAction_1_1()); }
	()
	{ after(grammarAccess.getEntityAccess().getSceneEntityAction_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GameStart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameStart__Group__0__Impl
	rule__GameStart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameStartAccess().getGameStartAction_0()); }
	()
	{ after(grammarAccess.getGameStartAccess().getGameStartAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameStart__Group__1__Impl
	rule__GameStart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameStartAccess().getWhenKeyword_1()); }
	When
	{ after(grammarAccess.getGameStartAccess().getWhenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameStart__Group__2__Impl
	rule__GameStart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameStartAccess().getGameKeyword_2()); }
	Game
	{ after(grammarAccess.getGameStartAccess().getGameKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameStart__Group__3__Impl
	rule__GameStart__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameStartAccess().getStartsKeyword_3()); }
	Starts
	{ after(grammarAccess.getGameStartAccess().getStartsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameStart__Group__4__Impl
	rule__GameStart__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameStartAccess().getBEGINTerminalRuleCall_4()); }
	RULE_BEGIN
	{ after(grammarAccess.getGameStartAccess().getBEGINTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameStart__Group__5__Impl
	rule__GameStart__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameStartAccess().getStatementsAssignment_5()); }
	(rule__GameStart__StatementsAssignment_5)*
	{ after(grammarAccess.getGameStartAccess().getStatementsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameStart__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameStartAccess().getENDTerminalRuleCall_6()); }
	RULE_END
	{ after(grammarAccess.getGameStartAccess().getENDTerminalRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SpriteClicked__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteClicked__Group__0__Impl
	rule__SpriteClicked__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteClickedAccess().getSpriteClickedAction_0()); }
	()
	{ after(grammarAccess.getSpriteClickedAccess().getSpriteClickedAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteClicked__Group__1__Impl
	rule__SpriteClicked__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteClickedAccess().getWhenKeyword_1()); }
	When
	{ after(grammarAccess.getSpriteClickedAccess().getWhenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteClicked__Group__2__Impl
	rule__SpriteClicked__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteClickedAccess().getThisKeyword_2()); }
	This
	{ after(grammarAccess.getSpriteClickedAccess().getThisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteClicked__Group__3__Impl
	rule__SpriteClicked__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteClickedAccess().getSpriteKeyword_3()); }
	Sprite
	{ after(grammarAccess.getSpriteClickedAccess().getSpriteKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteClicked__Group__4__Impl
	rule__SpriteClicked__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteClickedAccess().getClickedKeyword_4()); }
	Clicked
	{ after(grammarAccess.getSpriteClickedAccess().getClickedKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteClicked__Group__5__Impl
	rule__SpriteClicked__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteClickedAccess().getBEGINTerminalRuleCall_5()); }
	RULE_BEGIN
	{ after(grammarAccess.getSpriteClickedAccess().getBEGINTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteClicked__Group__6__Impl
	rule__SpriteClicked__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteClickedAccess().getStatementsAssignment_6()); }
	(rule__SpriteClicked__StatementsAssignment_6)*
	{ after(grammarAccess.getSpriteClickedAccess().getStatementsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteClicked__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteClickedAccess().getENDTerminalRuleCall_7()); }
	RULE_END
	{ after(grammarAccess.getSpriteClickedAccess().getENDTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__KeyPressed__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyPressed__Group__0__Impl
	rule__KeyPressed__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyPressedAccess().getKeyPressedAction_0()); }
	()
	{ after(grammarAccess.getKeyPressedAccess().getKeyPressedAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyPressed__Group__1__Impl
	rule__KeyPressed__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyPressedAccess().getWhenKeyword_1()); }
	When
	{ after(grammarAccess.getKeyPressedAccess().getWhenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyPressed__Group__2__Impl
	rule__KeyPressed__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyPressedAccess().getKeyAssignment_2()); }
	(rule__KeyPressed__KeyAssignment_2)
	{ after(grammarAccess.getKeyPressedAccess().getKeyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyPressed__Group__3__Impl
	rule__KeyPressed__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyPressedAccess().getKeyKeyword_3()); }
	Key
	{ after(grammarAccess.getKeyPressedAccess().getKeyKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyPressed__Group__4__Impl
	rule__KeyPressed__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyPressedAccess().getPressedKeyword_4()); }
	Pressed
	{ after(grammarAccess.getKeyPressedAccess().getPressedKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyPressed__Group__5__Impl
	rule__KeyPressed__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyPressedAccess().getBEGINTerminalRuleCall_5()); }
	RULE_BEGIN
	{ after(grammarAccess.getKeyPressedAccess().getBEGINTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyPressed__Group__6__Impl
	rule__KeyPressed__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyPressedAccess().getStatementsAssignment_6()); }
	(rule__KeyPressed__StatementsAssignment_6)*
	{ after(grammarAccess.getKeyPressedAccess().getStatementsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyPressed__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyPressedAccess().getENDTerminalRuleCall_7()); }
	RULE_END
	{ after(grammarAccess.getKeyPressedAccess().getENDTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CollidesWith__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollidesWith__Group__0__Impl
	rule__CollidesWith__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollidesWithAccess().getCollidesWithAction_0()); }
	()
	{ after(grammarAccess.getCollidesWithAccess().getCollidesWithAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollidesWith__Group__1__Impl
	rule__CollidesWith__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollidesWithAccess().getWhenKeyword_1()); }
	When
	{ after(grammarAccess.getCollidesWithAccess().getWhenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollidesWith__Group__2__Impl
	rule__CollidesWith__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollidesWithAccess().getCollidesKeyword_2()); }
	Collides
	{ after(grammarAccess.getCollidesWithAccess().getCollidesKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollidesWith__Group__3__Impl
	rule__CollidesWith__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollidesWithAccess().getWithKeyword_3()); }
	With
	{ after(grammarAccess.getCollidesWithAccess().getWithKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollidesWith__Group__4__Impl
	rule__CollidesWith__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollidesWithAccess().getTargetAssignment_4()); }
	(rule__CollidesWith__TargetAssignment_4)
	{ after(grammarAccess.getCollidesWithAccess().getTargetAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollidesWith__Group__5__Impl
	rule__CollidesWith__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollidesWithAccess().getBEGINTerminalRuleCall_5()); }
	RULE_BEGIN
	{ after(grammarAccess.getCollidesWithAccess().getBEGINTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollidesWith__Group__6__Impl
	rule__CollidesWith__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollidesWithAccess().getStatementsAssignment_6()); }
	(rule__CollidesWith__StatementsAssignment_6)*
	{ after(grammarAccess.getCollidesWithAccess().getStatementsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CollidesWith__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollidesWithAccess().getENDTerminalRuleCall_7()); }
	RULE_END
	{ after(grammarAccess.getCollidesWithAccess().getENDTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__0__Impl
	rule__WhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getWhileLoopAction_0()); }
	()
	{ after(grammarAccess.getWhileLoopAccess().getWhileLoopAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__1__Impl
	rule__WhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getWhileKeyword_1()); }
	While
	{ after(grammarAccess.getWhileLoopAccess().getWhileKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__2__Impl
	rule__WhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getPredicateAssignment_2()); }
	(rule__WhileLoop__PredicateAssignment_2)
	{ after(grammarAccess.getWhileLoopAccess().getPredicateAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__3__Impl
	rule__WhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getBEGINTerminalRuleCall_3()); }
	RULE_BEGIN
	{ after(grammarAccess.getWhileLoopAccess().getBEGINTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__4__Impl
	rule__WhileLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getLoopBlockAssignment_4()); }
	(rule__WhileLoop__LoopBlockAssignment_4)*
	{ after(grammarAccess.getWhileLoopAccess().getLoopBlockAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getENDTerminalRuleCall_5()); }
	RULE_END
	{ after(grammarAccess.getWhileLoopAccess().getENDTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfAction_0()); }
	()
	{ after(grammarAccess.getIfAccess().getIfAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_1()); }
	If
	{ after(grammarAccess.getIfAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getPredicateAssignment_2()); }
	(rule__If__PredicateAssignment_2)
	{ after(grammarAccess.getIfAccess().getPredicateAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getBEGINTerminalRuleCall_3()); }
	RULE_BEGIN
	{ after(grammarAccess.getIfAccess().getBEGINTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfBlockAssignment_4()); }
	(rule__If__IfBlockAssignment_4)*
	{ after(grammarAccess.getIfAccess().getIfBlockAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getENDTerminalRuleCall_5()); }
	RULE_END
	{ after(grammarAccess.getIfAccess().getENDTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForeverLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeverLoop__Group__0__Impl
	rule__ForeverLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeverLoopAccess().getForeverLoopAction_0()); }
	()
	{ after(grammarAccess.getForeverLoopAccess().getForeverLoopAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeverLoop__Group__1__Impl
	rule__ForeverLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeverLoopAccess().getForeverKeyword_1()); }
	Forever
	{ after(grammarAccess.getForeverLoopAccess().getForeverKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeverLoop__Group__2__Impl
	rule__ForeverLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeverLoopAccess().getBEGINTerminalRuleCall_2()); }
	RULE_BEGIN
	{ after(grammarAccess.getForeverLoopAccess().getBEGINTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeverLoop__Group__3__Impl
	rule__ForeverLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeverLoopAccess().getLoopStatementsAssignment_3()); }
	(rule__ForeverLoop__LoopStatementsAssignment_3)*
	{ after(grammarAccess.getForeverLoopAccess().getLoopStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeverLoop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeverLoopAccess().getENDTerminalRuleCall_4()); }
	RULE_END
	{ after(grammarAccess.getForeverLoopAccess().getENDTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getVarKeyword_0()); }
	Var
	{ after(grammarAccess.getVariableAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_1()); }
	(rule__Variable__NameAssignment_1)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__2__Impl
	rule__Variable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getEqualsSignKeyword_2()); }
	EqualsSign
	{ after(grammarAccess.getVariableAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getExpressionAssignment_3()); }
	(rule__Variable__ExpressionAssignment_3)
	{ after(grammarAccess.getVariableAccess().getExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignment__Group__0__Impl
	rule__VariableAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignmentAccess().getVariableNameAssignment_0()); }
	(rule__VariableAssignment__VariableNameAssignment_0)
	{ after(grammarAccess.getVariableAssignmentAccess().getVariableNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignment__Group__1__Impl
	rule__VariableAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignmentAccess().getEqualsSignKeyword_1()); }
	EqualsSign
	{ after(grammarAccess.getVariableAssignmentAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignmentAccess().getExpressionAssignment_2()); }
	(rule__VariableAssignment__ExpressionAssignment_2)
	{ after(grammarAccess.getVariableAssignmentAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrKeyword_1_1()); }
	Or
	{ after(grammarAccess.getOrAccess().getOrKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getAndAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndKeyword_1_1()); }
	And
	{ after(grammarAccess.getAndAccess().getAndKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__0__Impl
	rule__Plus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getMinusParserRuleCall_0()); }
	ruleMinus
	{ after(grammarAccess.getPlusAccess().getMinusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getGroup_1()); }
	(rule__Plus__Group_1__0)*
	{ after(grammarAccess.getPlusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__0__Impl
	rule__Plus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getPlusLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPlusAccess().getPlusLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__1__Impl
	rule__Plus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getPlusSignKeyword_1_1()); }
	PlusSign
	{ after(grammarAccess.getPlusAccess().getPlusSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getRightAssignment_1_2()); }
	(rule__Plus__RightAssignment_1_2)
	{ after(grammarAccess.getPlusAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group__0__Impl
	rule__Minus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getMultiplyParserRuleCall_0()); }
	ruleMultiply
	{ after(grammarAccess.getMinusAccess().getMultiplyParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getGroup_1()); }
	(rule__Minus__Group_1__0)*
	{ after(grammarAccess.getMinusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1__0__Impl
	rule__Minus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getMinusLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMinusAccess().getMinusLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1__1__Impl
	rule__Minus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getHyphenMinusKeyword_1_1()); }
	HyphenMinus
	{ after(grammarAccess.getMinusAccess().getHyphenMinusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getRightAssignment_1_2()); }
	(rule__Minus__RightAssignment_1_2)
	{ after(grammarAccess.getMinusAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiply__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiply__Group__0__Impl
	rule__Multiply__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyAccess().getDivideParserRuleCall_0()); }
	ruleDivide
	{ after(grammarAccess.getMultiplyAccess().getDivideParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiply__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyAccess().getGroup_1()); }
	(rule__Multiply__Group_1__0)*
	{ after(grammarAccess.getMultiplyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiply__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiply__Group_1__0__Impl
	rule__Multiply__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyAccess().getMultiplyLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplyAccess().getMultiplyLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiply__Group_1__1__Impl
	rule__Multiply__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyAccess().getAsteriskKeyword_1_1()); }
	Asterisk
	{ after(grammarAccess.getMultiplyAccess().getAsteriskKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiply__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyAccess().getRightAssignment_1_2()); }
	(rule__Multiply__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplyAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Divide__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group__0__Impl
	rule__Divide__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
	{ after(grammarAccess.getDivideAccess().getPrimaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getGroup_1()); }
	(rule__Divide__Group_1__0)*
	{ after(grammarAccess.getDivideAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Divide__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group_1__0__Impl
	rule__Divide__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getDivideLeftAction_1_0()); }
	()
	{ after(grammarAccess.getDivideAccess().getDivideLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group_1__1__Impl
	rule__Divide__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getSolidusKeyword_1_1()); }
	Solidus
	{ after(grammarAccess.getDivideAccess().getSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getRightAssignment_1_2()); }
	(rule__Divide__RightAssignment_1_2)
	{ after(grammarAccess.getDivideAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getPlusParserRuleCall_0()); }
	rulePlus
	{ after(grammarAccess.getComparisonAccess().getPlusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
	(rule__Comparison__Group_1__0)*
	{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getAlternatives_1_0()); }
	(rule__Comparison__Alternatives_1_0)
	{ after(grammarAccess.getComparisonAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
	(rule__Comparison__RightAssignment_1_1)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_0__0__Impl
	rule__Comparison__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_0()); }
	LessThanSign
	{ after(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getLessThanLeftAction_1_0_0_1()); }
	()
	{ after(grammarAccess.getComparisonAccess().getLessThanLeftAction_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_1__0__Impl
	rule__Comparison__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getEqualsSignEqualsSignKeyword_1_0_1_0()); }
	EqualsSignEqualsSign
	{ after(grammarAccess.getComparisonAccess().getEqualsSignEqualsSignKeyword_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getEqualLeftAction_1_0_1_1()); }
	()
	{ after(grammarAccess.getComparisonAccess().getEqualLeftAction_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_2__0__Impl
	rule__Comparison__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_2_0()); }
	GreaterThanSign
	{ after(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGreaterThanLeftAction_1_0_2_1()); }
	()
	{ after(grammarAccess.getComparisonAccess().getGreaterThanLeftAction_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
	()
	{ after(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFullStopKeyword_1()); }
	FullStop
	{ after(grammarAccess.getFunctionCallAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getNameAssignment_2()); }
	(rule__FunctionCall__NameAssignment_2)
	{ after(grammarAccess.getFunctionCallAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_3()); }
	LeftParenthesis
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__4__Impl
	rule__FunctionCall__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_4()); }
	(rule__FunctionCall__Group_4__0)?
	{ after(grammarAccess.getFunctionCallAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_5()); }
	RightParenthesis
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_4__0__Impl
	rule__FunctionCall__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_4_0()); }
	(rule__FunctionCall__ParametersAssignment_4_0)
	{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_4_1()); }
	(rule__FunctionCall__Group_4_1__0)*
	{ after(grammarAccess.getFunctionCallAccess().getGroup_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_4_1__0__Impl
	rule__FunctionCall__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_4_1_0()); }
	Comma
	{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_4_1_1()); }
	(rule__FunctionCall__ParametersAssignment_4_1_1)
	{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__1__Impl
	rule__PrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getNotAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryExpressionAccess().getNotAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1__1__Impl
	rule__PrimaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getNotKeyword_1_1()); }
	Not
	{ after(grammarAccess.getPrimaryExpressionAccess().getNotKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionAssignment_1_2()); }
	(rule__PrimaryExpression__ExpressionAssignment_1_2)
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_0__0__Impl
	rule__AtomicExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getBooleanLiteralAction_0_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getBooleanLiteralAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getAlternatives_0_1()); }
	(rule__AtomicExpression__Alternatives_0_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getAlternatives_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_1__0__Impl
	rule__AtomicExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getNumericLiteralAction_1_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getNumericLiteralAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getValueAssignment_1_1()); }
	(rule__AtomicExpression__ValueAssignment_1_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_2__0__Impl
	rule__AtomicExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getStringLiteralAction_2_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getStringLiteralAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getValueAssignment_2_1()); }
	(rule__AtomicExpression__ValueAssignment_2_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_3__0__Impl
	rule__AtomicExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getVariableRefAction_3_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getVariableRefAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getVariableNameAssignment_3_1()); }
	(rule__AtomicExpression__VariableNameAssignment_3_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getVariableNameAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Game__VariableDeclarationsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getVariableDeclarationsVariableParserRuleCall_1_0()); }
		ruleVariable
		{ after(grammarAccess.getGameAccess().getVariableDeclarationsVariableParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Game__ActorDefsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameAccess().getActorDefsActorParserRuleCall_2_0()); }
		ruleActor
		{ after(grammarAccess.getGameAccess().getActorDefsActorParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__EntityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getEntityEntityParserRuleCall_1_0()); }
		ruleEntity
		{ after(grammarAccess.getActorAccess().getEntityEntityParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__VariableDeclarationsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getVariableDeclarationsVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getActorAccess().getVariableDeclarationsVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__EventHandlersAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getEventHandlersEventHandlerParserRuleCall_4_0()); }
		ruleEventHandler
		{ after(grammarAccess.getActorAccess().getEventHandlersEventHandlerParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__NameAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_0_2_0()); }
		RULE_ID
		{ after(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__StatementsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameStartAccess().getStatementsStatementParserRuleCall_5_0()); }
		ruleStatement
		{ after(grammarAccess.getGameStartAccess().getStatementsStatementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteClicked__StatementsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpriteClickedAccess().getStatementsStatementParserRuleCall_6_0()); }
		ruleStatement
		{ after(grammarAccess.getSpriteClickedAccess().getStatementsStatementParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__KeyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyPressedAccess().getKeySTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getKeyPressedAccess().getKeySTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyPressed__StatementsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyPressedAccess().getStatementsStatementParserRuleCall_6_0()); }
		ruleStatement
		{ after(grammarAccess.getKeyPressedAccess().getStatementsStatementParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__TargetAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollidesWithAccess().getTargetSpriteEntityCrossReference_4_0()); }
		(
			{ before(grammarAccess.getCollidesWithAccess().getTargetSpriteEntityIDTerminalRuleCall_4_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCollidesWithAccess().getTargetSpriteEntityIDTerminalRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getCollidesWithAccess().getTargetSpriteEntityCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollidesWith__StatementsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollidesWithAccess().getStatementsStatementParserRuleCall_6_0()); }
		ruleStatement
		{ after(grammarAccess.getCollidesWithAccess().getStatementsStatementParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__PredicateAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileLoopAccess().getPredicateExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileLoopAccess().getPredicateExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__LoopBlockAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileLoopAccess().getLoopBlockStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getWhileLoopAccess().getLoopBlockStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__PredicateAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getPredicateExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getIfAccess().getPredicateExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__IfBlockAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getIfBlockStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getIfAccess().getIfBlockStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__LoopStatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeverLoopAccess().getLoopStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getForeverLoopAccess().getLoopStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__ExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__VariableNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAssignmentAccess().getVariableNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAssignmentAccess().getVariableNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getVariableAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightComparisonParserRuleCall_1_2_0()); }
		ruleComparison
		{ after(grammarAccess.getAndAccess().getRightComparisonParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusAccess().getRightMinusParserRuleCall_1_2_0()); }
		ruleMinus
		{ after(grammarAccess.getPlusAccess().getRightMinusParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinusAccess().getRightMultiplyParserRuleCall_1_2_0()); }
		ruleMultiply
		{ after(grammarAccess.getMinusAccess().getRightMultiplyParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyAccess().getRightDivideParserRuleCall_1_2_0()); }
		ruleDivide
		{ after(grammarAccess.getMultiplyAccess().getRightDivideParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivideAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getDivideAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightPlusParserRuleCall_1_1_0()); }
		rulePlus
		{ after(grammarAccess.getComparisonAccess().getRightPlusParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionCallAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_4_0_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_4_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionCallAccess().getParametersExpressionParserRuleCall_4_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_1_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ValueAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueTrueKeyword_0_1_0_0()); }
		(
			{ before(grammarAccess.getAtomicExpressionAccess().getValueTrueKeyword_0_1_0_0()); }
			True
			{ after(grammarAccess.getAtomicExpressionAccess().getValueTrueKeyword_0_1_0_0()); }
		)
		{ after(grammarAccess.getAtomicExpressionAccess().getValueTrueKeyword_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueDECIMALTerminalRuleCall_1_1_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getAtomicExpressionAccess().getValueDECIMALTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAtomicExpressionAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__VariableNameAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getVariableNameIDTerminalRuleCall_3_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAtomicExpressionAccess().getVariableNameIDTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
