/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
parser grammar InternalKlangParser;

options {
	tokenVocab=InternalKlangLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package com.kaurel.klang.xtext.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.kaurel.klang.xtext.services.KlangGrammarAccess;

}
@members {
	private KlangGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("If", "'if'");
		tokenNameToValue.put("Or", "'or'");
		tokenNameToValue.put("And", "'and'");
		tokenNameToValue.put("Not", "'not'");
		tokenNameToValue.put("Var", "'var'");
		tokenNameToValue.put("True", "'true'");
		tokenNameToValue.put("When", "'when'");
		tokenNameToValue.put("False", "'false'");
		tokenNameToValue.put("While", "'while'");
		tokenNameToValue.put("Yield", "'yield'");
		tokenNameToValue.put("Sprite", "'sprite'");
		tokenNameToValue.put("Forever", "'forever'");
		tokenNameToValue.put("GAME_STARTED", "'GAME_STARTED'");
	}

	public void setGrammarAccess(KlangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleGameDef
entryRuleGameDef
:
{ before(grammarAccess.getGameDefRule()); }
	 ruleGameDef
{ after(grammarAccess.getGameDefRule()); } 
	 EOF 
;

// Rule GameDef
ruleGameDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGameDefAccess().getGroup()); }
		(rule__GameDef__Group__0)
		{ after(grammarAccess.getGameDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpriteDef
entryRuleSpriteDef
:
{ before(grammarAccess.getSpriteDefRule()); }
	 ruleSpriteDef
{ after(grammarAccess.getSpriteDefRule()); } 
	 EOF 
;

// Rule SpriteDef
ruleSpriteDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpriteDefAccess().getGroup()); }
		(rule__SpriteDef__Group__0)
		{ after(grammarAccess.getSpriteDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEventHandler
entryRuleEventHandler
:
{ before(grammarAccess.getEventHandlerRule()); }
	 ruleEventHandler
{ after(grammarAccess.getEventHandlerRule()); } 
	 EOF 
;

// Rule EventHandler
ruleEventHandler 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventHandlerAccess().getGroup()); }
		(rule__EventHandler__Group__0)
		{ after(grammarAccess.getEventHandlerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileLoop
entryRuleWhileLoop
:
{ before(grammarAccess.getWhileLoopRule()); }
	 ruleWhileLoop
{ after(grammarAccess.getWhileLoopRule()); } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileLoopAccess().getGroup()); }
		(rule__WhileLoop__Group__0)
		{ after(grammarAccess.getWhileLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForeverLoop
entryRuleForeverLoop
:
{ before(grammarAccess.getForeverLoopRule()); }
	 ruleForeverLoop
{ after(grammarAccess.getForeverLoopRule()); } 
	 EOF 
;

// Rule ForeverLoop
ruleForeverLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForeverLoopAccess().getGroup()); }
		(rule__ForeverLoop__Group__0)
		{ after(grammarAccess.getForeverLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubroutineCall
entryRuleSubroutineCall
:
{ before(grammarAccess.getSubroutineCallRule()); }
	 ruleSubroutineCall
{ after(grammarAccess.getSubroutineCallRule()); } 
	 EOF 
;

// Rule SubroutineCall
ruleSubroutineCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubroutineCallAccess().getGroup()); }
		(rule__SubroutineCall__Group__0)
		{ after(grammarAccess.getSubroutineCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleControlStatement
entryRuleControlStatement
:
{ before(grammarAccess.getControlStatementRule()); }
	 ruleControlStatement
{ after(grammarAccess.getControlStatementRule()); } 
	 EOF 
;

// Rule ControlStatement
ruleControlStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getControlStatementAccess().getAlternatives()); }
		(rule__ControlStatement__Alternatives)
		{ after(grammarAccess.getControlStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleYield
entryRuleYield
:
{ before(grammarAccess.getYieldRule()); }
	 ruleYield
{ after(grammarAccess.getYieldRule()); } 
	 EOF 
;

// Rule Yield
ruleYield 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getYieldAccess().getGroup()); }
		(rule__Yield__Group__0)
		{ after(grammarAccess.getYieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
		ruleOr
		{ after(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlus
entryRulePlus
:
{ before(grammarAccess.getPlusRule()); }
	 rulePlus
{ after(grammarAccess.getPlusRule()); } 
	 EOF 
;

// Rule Plus
rulePlus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusAccess().getGroup()); }
		(rule__Plus__Group__0)
		{ after(grammarAccess.getPlusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMinus
entryRuleMinus
:
{ before(grammarAccess.getMinusRule()); }
	 ruleMinus
{ after(grammarAccess.getMinusRule()); } 
	 EOF 
;

// Rule Minus
ruleMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinusAccess().getGroup()); }
		(rule__Minus__Group__0)
		{ after(grammarAccess.getMinusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiply
entryRuleMultiply
:
{ before(grammarAccess.getMultiplyRule()); }
	 ruleMultiply
{ after(grammarAccess.getMultiplyRule()); } 
	 EOF 
;

// Rule Multiply
ruleMultiply 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplyAccess().getGroup()); }
		(rule__Multiply__Group__0)
		{ after(grammarAccess.getMultiplyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDivide
entryRuleDivide
:
{ before(grammarAccess.getDivideRule()); }
	 ruleDivide
{ after(grammarAccess.getDivideRule()); } 
	 EOF 
;

// Rule Divide
ruleDivide 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDivideAccess().getGroup()); }
		(rule__Divide__Group__0)
		{ after(grammarAccess.getDivideAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotOp
entryRuleNotOp
:
{ before(grammarAccess.getNotOpRule()); }
	 ruleNotOp
{ after(grammarAccess.getNotOpRule()); } 
	 EOF 
;

// Rule NotOp
ruleNotOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotOpAccess().getAlternatives()); }
		(rule__NotOp__Alternatives)
		{ after(grammarAccess.getNotOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression
:
{ before(grammarAccess.getAtomicExpressionRule()); }
	 ruleAtomicExpression
{ after(grammarAccess.getAtomicExpressionRule()); } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
		(rule__AtomicExpression__Alternatives)
		{ after(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule EventType
ruleEventType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventTypeAccess().getGAME_STARTEDEnumLiteralDeclaration()); }
		(GAME_STARTED)
		{ after(grammarAccess.getEventTypeAccess().getGAME_STARTEDEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getControlStatementParserRuleCall_0()); }
		ruleControlStatement
		{ after(grammarAccess.getStatementAccess().getControlStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getVariableParserRuleCall_1()); }
		ruleVariable
		{ after(grammarAccess.getStatementAccess().getVariableParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_2()); }
		ruleAssignment
		{ after(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSubroutineCallParserRuleCall_3()); }
		ruleSubroutineCall
		{ after(grammarAccess.getStatementAccess().getSubroutineCallParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ControlStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getControlStatementAccess().getForeverLoopParserRuleCall_0()); }
		ruleForeverLoop
		{ after(grammarAccess.getControlStatementAccess().getForeverLoopParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getControlStatementAccess().getWhileLoopParserRuleCall_1()); }
		ruleWhileLoop
		{ after(grammarAccess.getControlStatementAccess().getWhileLoopParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getControlStatementAccess().getYieldParserRuleCall_2()); }
		ruleYield
		{ after(grammarAccess.getControlStatementAccess().getYieldParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getControlStatementAccess().getIfParserRuleCall_3()); }
		ruleIf
		{ after(grammarAccess.getControlStatementAccess().getIfParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
		(rule__Comparison__Group_1_0_0__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0_1()); }
		(rule__Comparison__Group_1_0_1__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0_2()); }
		(rule__Comparison__Group_1_0_2__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
		(rule__PrimaryExpression__Group_0__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
		(rule__PrimaryExpression__Group_1__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAtomicExpressionParserRuleCall_2()); }
		ruleAtomicExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getAtomicExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotOpAccess().getExclamationMarkKeyword_0()); }
		ExclamationMark
		{ after(grammarAccess.getNotOpAccess().getExclamationMarkKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotOpAccess().getNotKeyword_1()); }
		Not
		{ after(grammarAccess.getNotOpAccess().getNotKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_0()); }
		(rule__AtomicExpression__Group_0__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_1()); }
		(rule__AtomicExpression__Group_1__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
		(rule__AtomicExpression__Group_2__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getGroup_3()); }
		(rule__AtomicExpression__Group_3__0)
		{ after(grammarAccess.getAtomicExpressionAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Alternatives_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueAssignment_0_1_0()); }
		(rule__AtomicExpression__ValueAssignment_0_1_0)
		{ after(grammarAccess.getAtomicExpressionAccess().getValueAssignment_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getFalseKeyword_0_1_1()); }
		False
		{ after(grammarAccess.getAtomicExpressionAccess().getFalseKeyword_0_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameDef__Group__0__Impl
	rule__GameDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GameDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameDefAccess().getGameDefAction_0()); }
	()
	{ after(grammarAccess.getGameDefAccess().getGameDefAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameDef__Group__1__Impl
	rule__GameDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GameDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameDefAccess().getVariablesAssignment_1()); }
	(rule__GameDef__VariablesAssignment_1)*
	{ after(grammarAccess.getGameDefAccess().getVariablesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameDef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameDef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GameDef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameDefAccess().getActorDefsAssignment_2()); }
	(rule__GameDef__ActorDefsAssignment_2)*
	{ after(grammarAccess.getGameDefAccess().getActorDefsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SpriteDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteDef__Group__0__Impl
	rule__SpriteDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteDefAccess().getSpriteDefAction_0()); }
	()
	{ after(grammarAccess.getSpriteDefAccess().getSpriteDefAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteDef__Group__1__Impl
	rule__SpriteDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteDefAccess().getSpriteKeyword_1()); }
	Sprite
	{ after(grammarAccess.getSpriteDefAccess().getSpriteKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteDef__Group__2__Impl
	rule__SpriteDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteDefAccess().getNameAssignment_2()); }
	(rule__SpriteDef__NameAssignment_2)
	{ after(grammarAccess.getSpriteDefAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteDef__Group__3__Impl
	rule__SpriteDef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteDefAccess().getBEGINTerminalRuleCall_3()); }
	RULE_BEGIN
	{ after(grammarAccess.getSpriteDefAccess().getBEGINTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteDef__Group__4__Impl
	rule__SpriteDef__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteDefAccess().getVariablesAssignment_4()); }
	(rule__SpriteDef__VariablesAssignment_4)*
	{ after(grammarAccess.getSpriteDefAccess().getVariablesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteDef__Group__5__Impl
	rule__SpriteDef__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteDefAccess().getEventHandlersAssignment_5()); }
	(rule__SpriteDef__EventHandlersAssignment_5)*
	{ after(grammarAccess.getSpriteDefAccess().getEventHandlersAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SpriteDef__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpriteDefAccess().getENDTerminalRuleCall_6()); }
	RULE_END
	{ after(grammarAccess.getSpriteDefAccess().getENDTerminalRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EventHandler__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventHandler__Group__0__Impl
	rule__EventHandler__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventHandlerAccess().getWhenKeyword_0()); }
	When
	{ after(grammarAccess.getEventHandlerAccess().getWhenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventHandler__Group__1__Impl
	rule__EventHandler__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventHandlerAccess().getEventTypeAssignment_1()); }
	(rule__EventHandler__EventTypeAssignment_1)
	{ after(grammarAccess.getEventHandlerAccess().getEventTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventHandler__Group__2__Impl
	rule__EventHandler__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventHandlerAccess().getBEGINTerminalRuleCall_2()); }
	RULE_BEGIN
	{ after(grammarAccess.getEventHandlerAccess().getBEGINTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventHandler__Group__3__Impl
	rule__EventHandler__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventHandlerAccess().getStatementsAssignment_3()); }
	(rule__EventHandler__StatementsAssignment_3)*
	{ after(grammarAccess.getEventHandlerAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventHandler__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventHandlerAccess().getENDTerminalRuleCall_4()); }
	RULE_END
	{ after(grammarAccess.getEventHandlerAccess().getENDTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__0__Impl
	rule__WhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getWhileLoopAction_0()); }
	()
	{ after(grammarAccess.getWhileLoopAccess().getWhileLoopAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__1__Impl
	rule__WhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getWhileKeyword_1()); }
	While
	{ after(grammarAccess.getWhileLoopAccess().getWhileKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__2__Impl
	rule__WhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getPredicateAssignment_2()); }
	(rule__WhileLoop__PredicateAssignment_2)
	{ after(grammarAccess.getWhileLoopAccess().getPredicateAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__3__Impl
	rule__WhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getBEGINTerminalRuleCall_3()); }
	RULE_BEGIN
	{ after(grammarAccess.getWhileLoopAccess().getBEGINTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__4__Impl
	rule__WhileLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getLoopBlockAssignment_4()); }
	(rule__WhileLoop__LoopBlockAssignment_4)*
	{ after(grammarAccess.getWhileLoopAccess().getLoopBlockAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileLoop__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileLoopAccess().getENDTerminalRuleCall_5()); }
	RULE_END
	{ after(grammarAccess.getWhileLoopAccess().getENDTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfAction_0()); }
	()
	{ after(grammarAccess.getIfAccess().getIfAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_1()); }
	If
	{ after(grammarAccess.getIfAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getPredicateAssignment_2()); }
	(rule__If__PredicateAssignment_2)
	{ after(grammarAccess.getIfAccess().getPredicateAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getBEGINTerminalRuleCall_3()); }
	RULE_BEGIN
	{ after(grammarAccess.getIfAccess().getBEGINTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfBlockAssignment_4()); }
	(rule__If__IfBlockAssignment_4)*
	{ after(grammarAccess.getIfAccess().getIfBlockAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getENDTerminalRuleCall_5()); }
	RULE_END
	{ after(grammarAccess.getIfAccess().getENDTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForeverLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeverLoop__Group__0__Impl
	rule__ForeverLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeverLoopAccess().getForeverLoopAction_0()); }
	()
	{ after(grammarAccess.getForeverLoopAccess().getForeverLoopAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeverLoop__Group__1__Impl
	rule__ForeverLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeverLoopAccess().getForeverKeyword_1()); }
	Forever
	{ after(grammarAccess.getForeverLoopAccess().getForeverKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeverLoop__Group__2__Impl
	rule__ForeverLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeverLoopAccess().getBEGINTerminalRuleCall_2()); }
	RULE_BEGIN
	{ after(grammarAccess.getForeverLoopAccess().getBEGINTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeverLoop__Group__3__Impl
	rule__ForeverLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeverLoopAccess().getLoopStatementsAssignment_3()); }
	(rule__ForeverLoop__LoopStatementsAssignment_3)*
	{ after(grammarAccess.getForeverLoopAccess().getLoopStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeverLoop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeverLoopAccess().getENDTerminalRuleCall_4()); }
	RULE_END
	{ after(grammarAccess.getForeverLoopAccess().getENDTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubroutineCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubroutineCall__Group__0__Impl
	rule__SubroutineCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubroutineCallAccess().getNameAssignment_0()); }
	(rule__SubroutineCall__NameAssignment_0)
	{ after(grammarAccess.getSubroutineCallAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubroutineCall__Group__1__Impl
	rule__SubroutineCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubroutineCallAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getSubroutineCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubroutineCall__Group__2__Impl
	rule__SubroutineCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubroutineCallAccess().getParametersAssignment_2()); }
	(rule__SubroutineCall__ParametersAssignment_2)?
	{ after(grammarAccess.getSubroutineCallAccess().getParametersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubroutineCall__Group__3__Impl
	rule__SubroutineCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubroutineCallAccess().getGroup_3()); }
	(rule__SubroutineCall__Group_3__0)*
	{ after(grammarAccess.getSubroutineCallAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubroutineCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubroutineCallAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getSubroutineCallAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubroutineCall__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubroutineCall__Group_3__0__Impl
	rule__SubroutineCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubroutineCallAccess().getCommaKeyword_3_0()); }
	Comma
	{ after(grammarAccess.getSubroutineCallAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubroutineCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubroutineCallAccess().getParametersAssignment_3_1()); }
	(rule__SubroutineCall__ParametersAssignment_3_1)
	{ after(grammarAccess.getSubroutineCallAccess().getParametersAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Yield__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Yield__Group__0__Impl
	rule__Yield__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Yield__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYieldAccess().getYieldAction_0()); }
	()
	{ after(grammarAccess.getYieldAccess().getYieldAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Yield__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Yield__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Yield__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYieldAccess().getYieldKeyword_1()); }
	Yield
	{ after(grammarAccess.getYieldAccess().getYieldKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getVarKeyword_0()); }
	Var
	{ after(grammarAccess.getVariableAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_1()); }
	(rule__Variable__NameAssignment_1)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__2__Impl
	rule__Variable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getEqualsSignKeyword_2()); }
	EqualsSign
	{ after(grammarAccess.getVariableAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getExpressionAssignment_3()); }
	(rule__Variable__ExpressionAssignment_3)
	{ after(grammarAccess.getVariableAccess().getExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
	(rule__Assignment__VariableAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
	EqualsSign
	{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
	(rule__Assignment__ExpressionAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrKeyword_1_1()); }
	Or
	{ after(grammarAccess.getOrAccess().getOrKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getAndAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndKeyword_1_1()); }
	And
	{ after(grammarAccess.getAndAccess().getAndKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__0__Impl
	rule__Plus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getMinusParserRuleCall_0()); }
	ruleMinus
	{ after(grammarAccess.getPlusAccess().getMinusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getGroup_1()); }
	(rule__Plus__Group_1__0)*
	{ after(grammarAccess.getPlusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__0__Impl
	rule__Plus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getPlusLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPlusAccess().getPlusLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__1__Impl
	rule__Plus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getPlusSignKeyword_1_1()); }
	PlusSign
	{ after(grammarAccess.getPlusAccess().getPlusSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getRightAssignment_1_2()); }
	(rule__Plus__RightAssignment_1_2)
	{ after(grammarAccess.getPlusAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group__0__Impl
	rule__Minus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getMultiplyParserRuleCall_0()); }
	ruleMultiply
	{ after(grammarAccess.getMinusAccess().getMultiplyParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getGroup_1()); }
	(rule__Minus__Group_1__0)*
	{ after(grammarAccess.getMinusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Minus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1__0__Impl
	rule__Minus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getMinusLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMinusAccess().getMinusLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1__1__Impl
	rule__Minus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getHyphenMinusKeyword_1_1()); }
	HyphenMinus
	{ after(grammarAccess.getMinusAccess().getHyphenMinusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Minus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinusAccess().getRightAssignment_1_2()); }
	(rule__Minus__RightAssignment_1_2)
	{ after(grammarAccess.getMinusAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiply__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiply__Group__0__Impl
	rule__Multiply__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyAccess().getDivideParserRuleCall_0()); }
	ruleDivide
	{ after(grammarAccess.getMultiplyAccess().getDivideParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiply__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyAccess().getGroup_1()); }
	(rule__Multiply__Group_1__0)*
	{ after(grammarAccess.getMultiplyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiply__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiply__Group_1__0__Impl
	rule__Multiply__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyAccess().getMultiplyLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplyAccess().getMultiplyLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiply__Group_1__1__Impl
	rule__Multiply__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyAccess().getAsteriskKeyword_1_1()); }
	Asterisk
	{ after(grammarAccess.getMultiplyAccess().getAsteriskKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiply__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyAccess().getRightAssignment_1_2()); }
	(rule__Multiply__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplyAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Divide__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group__0__Impl
	rule__Divide__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
	{ after(grammarAccess.getDivideAccess().getPrimaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getGroup_1()); }
	(rule__Divide__Group_1__0)*
	{ after(grammarAccess.getDivideAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Divide__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group_1__0__Impl
	rule__Divide__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getDivideLeftAction_1_0()); }
	()
	{ after(grammarAccess.getDivideAccess().getDivideLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group_1__1__Impl
	rule__Divide__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getSolidusKeyword_1_1()); }
	Solidus
	{ after(grammarAccess.getDivideAccess().getSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Divide__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivideAccess().getRightAssignment_1_2()); }
	(rule__Divide__RightAssignment_1_2)
	{ after(grammarAccess.getDivideAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getPlusParserRuleCall_0()); }
	rulePlus
	{ after(grammarAccess.getComparisonAccess().getPlusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
	(rule__Comparison__Group_1__0)*
	{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getAlternatives_1_0()); }
	(rule__Comparison__Alternatives_1_0)
	{ after(grammarAccess.getComparisonAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
	(rule__Comparison__RightAssignment_1_1)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_0__0__Impl
	rule__Comparison__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_0()); }
	LessThanSign
	{ after(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getLessThanLeftAction_1_0_0_1()); }
	()
	{ after(grammarAccess.getComparisonAccess().getLessThanLeftAction_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_1__0__Impl
	rule__Comparison__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getEqualsSignKeyword_1_0_1_0()); }
	EqualsSign
	{ after(grammarAccess.getComparisonAccess().getEqualsSignKeyword_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getEqualLeftAction_1_0_1_1()); }
	()
	{ after(grammarAccess.getComparisonAccess().getEqualLeftAction_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_2__0__Impl
	rule__Comparison__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_2_0()); }
	GreaterThanSign
	{ after(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGreaterThanLeftAction_1_0_2_1()); }
	()
	{ after(grammarAccess.getComparisonAccess().getGreaterThanLeftAction_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__1__Impl
	rule__PrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getNotAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryExpressionAccess().getNotAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1__1__Impl
	rule__PrimaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getNotOpParserRuleCall_1_1()); }
	ruleNotOp
	{ after(grammarAccess.getPrimaryExpressionAccess().getNotOpParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionAssignment_1_2()); }
	(rule__PrimaryExpression__ExpressionAssignment_1_2)
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_0__0__Impl
	rule__AtomicExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getBooleanLiteralAction_0_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getBooleanLiteralAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getAlternatives_0_1()); }
	(rule__AtomicExpression__Alternatives_0_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getAlternatives_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_1__0__Impl
	rule__AtomicExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getNumericLiteralAction_1_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getNumericLiteralAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getValueAssignment_1_1()); }
	(rule__AtomicExpression__ValueAssignment_1_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_2__0__Impl
	rule__AtomicExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getStringLiteralAction_2_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getStringLiteralAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getValueAssignment_2_1()); }
	(rule__AtomicExpression__ValueAssignment_2_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_3__0__Impl
	rule__AtomicExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getVariableRefAction_3_0()); }
	()
	{ after(grammarAccess.getAtomicExpressionAccess().getVariableRefAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicExpressionAccess().getVariableNameAssignment_3_1()); }
	(rule__AtomicExpression__VariableNameAssignment_3_1)
	{ after(grammarAccess.getAtomicExpressionAccess().getVariableNameAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GameDef__VariablesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameDefAccess().getVariablesVariableParserRuleCall_1_0()); }
		ruleVariable
		{ after(grammarAccess.getGameDefAccess().getVariablesVariableParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameDef__ActorDefsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameDefAccess().getActorDefsSpriteDefParserRuleCall_2_0()); }
		ruleSpriteDef
		{ after(grammarAccess.getGameDefAccess().getActorDefsSpriteDefParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpriteDefAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getSpriteDefAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__VariablesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpriteDefAccess().getVariablesVariableParserRuleCall_4_0()); }
		ruleVariable
		{ after(grammarAccess.getSpriteDefAccess().getVariablesVariableParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SpriteDef__EventHandlersAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpriteDefAccess().getEventHandlersEventHandlerParserRuleCall_5_0()); }
		ruleEventHandler
		{ after(grammarAccess.getSpriteDefAccess().getEventHandlersEventHandlerParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__EventTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventHandlerAccess().getEventTypeEventTypeEnumRuleCall_1_0()); }
		ruleEventType
		{ after(grammarAccess.getEventHandlerAccess().getEventTypeEventTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventHandler__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventHandlerAccess().getStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getEventHandlerAccess().getStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__PredicateAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileLoopAccess().getPredicateExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileLoopAccess().getPredicateExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__LoopBlockAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileLoopAccess().getLoopBlockStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getWhileLoopAccess().getLoopBlockStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__PredicateAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getPredicateExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getIfAccess().getPredicateExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__IfBlockAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getIfBlockStatementParserRuleCall_4_0()); }
		ruleStatement
		{ after(grammarAccess.getIfAccess().getIfBlockStatementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeverLoop__LoopStatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeverLoopAccess().getLoopStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getForeverLoopAccess().getLoopStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubroutineCallAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSubroutineCallAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__ParametersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubroutineCallAccess().getParametersExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSubroutineCallAccess().getParametersExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubroutineCall__ParametersAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubroutineCallAccess().getParametersExpressionParserRuleCall_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSubroutineCallAccess().getParametersExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__ExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VariableAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAssignmentAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssignmentAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAssignmentAccess().getVariableVariableCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightComparisonParserRuleCall_1_2_0()); }
		ruleComparison
		{ after(grammarAccess.getAndAccess().getRightComparisonParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusAccess().getRightMinusParserRuleCall_1_2_0()); }
		ruleMinus
		{ after(grammarAccess.getPlusAccess().getRightMinusParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Minus__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinusAccess().getRightMultiplyParserRuleCall_1_2_0()); }
		ruleMultiply
		{ after(grammarAccess.getMinusAccess().getRightMultiplyParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiply__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyAccess().getRightDivideParserRuleCall_1_2_0()); }
		ruleDivide
		{ after(grammarAccess.getMultiplyAccess().getRightDivideParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Divide__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivideAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getDivideAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightPlusParserRuleCall_1_1_0()); }
		rulePlus
		{ after(grammarAccess.getComparisonAccess().getRightPlusParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_1_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ValueAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueTrueKeyword_0_1_0_0()); }
		(
			{ before(grammarAccess.getAtomicExpressionAccess().getValueTrueKeyword_0_1_0_0()); }
			True
			{ after(grammarAccess.getAtomicExpressionAccess().getValueTrueKeyword_0_1_0_0()); }
		)
		{ after(grammarAccess.getAtomicExpressionAccess().getValueTrueKeyword_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueNUMERICTerminalRuleCall_1_1_0()); }
		RULE_NUMERIC
		{ after(grammarAccess.getAtomicExpressionAccess().getValueNUMERICTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAtomicExpressionAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__VariableNameAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicExpressionAccess().getVariableNameIDTerminalRuleCall_3_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAtomicExpressionAccess().getVariableNameIDTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
